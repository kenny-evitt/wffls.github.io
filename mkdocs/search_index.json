{
    "docs": [
        {
            "location": "/", 
            "text": "Waffles\n\n\nA collection of tools to help make deploying, provisioning, and maintaining systems easier.\n\n\nWaffles Shell Scripts\n\n\nThe core of the Waffles project is... \nWaffles\n: a suite of Bash scripts to manage server resources in an idempotent fashion. You can use Waffles to create server build scripts that can be executed multiple times and only making changes when needed.\n\n\nWaffles tries to be:\n\n\nEasy to Use\n\n\nTo get started with Waffles, simply \"source\" the \ninit.sh\n script:\n\n\n$ source /opt/waffles/init.sh\n$ apt.pkg --help\n\n\n\n\nSimple\n\n\nIf you're proficient in shell scripting and system administration, you should have no problem dissecting and understanding Waffles.\n\n\nHelpful\n\n\nWaffles helps make the tasks you're already doing easier; whether that's adding an \napt\n PPA, a line to an \nini\n file, or adding a Cron entry.\n\n\nResourceful\n\n\nWaffles doesn't try to reinvent the wheel. Waffles leans on core system tools like \nawk\n, \nsed\n, and plain 'ol Bash to accomplish its tasks. Some Waffles resources have dependencies, but only when it makes sense.\n\n\nHumble\n\n\nIf there's a better tool for the job, Waffles yields to it. Waffles isn't interested in creating servers -- use \nTerraform\n for that. Use \nConsul\n or \nJuju\n for service orchestration.\n\n\nUse Waffles for maintaining basic resources within a server.\n\n\nWafflescript\n\n\nWafflescript\n is a compiled binary of Waffles. Simply copy the \nwafflescript\n binary to any system and immediately take advantage of the various Waffles resources.", 
            "title": "Home"
        }, 
        {
            "location": "/#waffles", 
            "text": "A collection of tools to help make deploying, provisioning, and maintaining systems easier.", 
            "title": "Waffles"
        }, 
        {
            "location": "/#waffles-shell-scripts", 
            "text": "The core of the Waffles project is...  Waffles : a suite of Bash scripts to manage server resources in an idempotent fashion. You can use Waffles to create server build scripts that can be executed multiple times and only making changes when needed.  Waffles tries to be:", 
            "title": "Waffles Shell Scripts"
        }, 
        {
            "location": "/#easy-to-use", 
            "text": "To get started with Waffles, simply \"source\" the  init.sh  script:  $ source /opt/waffles/init.sh\n$ apt.pkg --help", 
            "title": "Easy to Use"
        }, 
        {
            "location": "/#simple", 
            "text": "If you're proficient in shell scripting and system administration, you should have no problem dissecting and understanding Waffles.", 
            "title": "Simple"
        }, 
        {
            "location": "/#helpful", 
            "text": "Waffles helps make the tasks you're already doing easier; whether that's adding an  apt  PPA, a line to an  ini  file, or adding a Cron entry.", 
            "title": "Helpful"
        }, 
        {
            "location": "/#resourceful", 
            "text": "Waffles doesn't try to reinvent the wheel. Waffles leans on core system tools like  awk ,  sed , and plain 'ol Bash to accomplish its tasks. Some Waffles resources have dependencies, but only when it makes sense.", 
            "title": "Resourceful"
        }, 
        {
            "location": "/#humble", 
            "text": "If there's a better tool for the job, Waffles yields to it. Waffles isn't interested in creating servers -- use  Terraform  for that. Use  Consul  or  Juju  for service orchestration.  Use Waffles for maintaining basic resources within a server.", 
            "title": "Humble"
        }, 
        {
            "location": "/#wafflescript", 
            "text": "Wafflescript  is a compiled binary of Waffles. Simply copy the  wafflescript  binary to any system and immediately take advantage of the various Waffles resources.", 
            "title": "Wafflescript"
        }, 
        {
            "location": "/guides/install_waffles/", 
            "text": "Install Waffles\n\n\nInstalling Waffles is quick and easy!\n\n\n1. Clone the repository to a directory of your choice and install:\n\n\n$ git clone https://github.com/jtopjian/waffles /opt/waffles\n\n\n\n\n2. Source the \ninit.sh\n file either on the command-line or in a script.\n\n\nCommand-line\n\n\n$ source /opt/waffles/init.sh\n$ apt.pkg --help\n\n\n\n\nScript\n\n\n#!/bin/bash\n\nsource /opt/waffles.sh\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2\n/dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line \n-m $memory\n --match \n^-m\n\n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Install Waffles"
        }, 
        {
            "location": "/guides/install_waffles/#install-waffles", 
            "text": "Installing Waffles is quick and easy!  1. Clone the repository to a directory of your choice and install:  $ git clone https://github.com/jtopjian/waffles /opt/waffles  2. Source the  init.sh  file either on the command-line or in a script.", 
            "title": "Install Waffles"
        }, 
        {
            "location": "/guides/install_waffles/#command-line", 
            "text": "$ source /opt/waffles/init.sh\n$ apt.pkg --help", 
            "title": "Command-line"
        }, 
        {
            "location": "/guides/install_waffles/#script", 
            "text": "#!/bin/bash\n\nsource /opt/waffles.sh\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2 /dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line  -m $memory  --match  ^-m \n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Script"
        }, 
        {
            "location": "/guides/install_wafflescript/", 
            "text": "Install wafflescript\n\n\nInstalling wafflescript is quick and easy!\n\n\n1. Check the \nRelease Page\n for the latest release.\n\n\n2. Download and Untar it:\n\n\n$ wget https://github.com/wffls/wafflescript/releases/download/X/wafflescript_X_linux_x86_64.tgz\n$ tar xzf wafflescript_X_linux_x86_64.tgz -C /usr/local/bin\n\n\n\n\n3. Use it as the \"shebang\" interpreter in a script:\n\n\n#!/usr/local/bin/wafflescript\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2\n/dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line \n-m $memory\n --match \n^-m\n\n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Install wafflescript"
        }, 
        {
            "location": "/guides/install_wafflescript/#install-wafflescript", 
            "text": "Installing wafflescript is quick and easy!  1. Check the  Release Page  for the latest release.  2. Download and Untar it:  $ wget https://github.com/wffls/wafflescript/releases/download/X/wafflescript_X_linux_x86_64.tgz\n$ tar xzf wafflescript_X_linux_x86_64.tgz -C /usr/local/bin  3. Use it as the \"shebang\" interpreter in a script:  #!/usr/local/bin/wafflescript\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2 /dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line  -m $memory  --match  ^-m \n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Install wafflescript"
        }, 
        {
            "location": "/functions/arrays/", 
            "text": "Array Functions\n\n\nfunctions/arrays.sh\n contains functions to help interact with arrays and hashes/maps.\n\n\narray.contains\n\n\nReports true if element exists in an array.\n\n\nx=(foo bar baz)\nif array.contains \nx\n \nfoo\n ; then\n  echo \nExists\n\nfi\n\n\n\n\narray.join\n\n\nJoins an array into a string.\n\n\nx=(foo bar baz)\narray.join x ,\n=\n foo,bar,baz\n\n\n\n\narray.length\n\n\nReturns the length of an array.\n\n\nx=(a b c)\narray.length x\n=\n 3\n\n\n\n\narray.pop\n\n\nRemoves and the last element from array $1 and optionally stores it in $2\n\n\nx=(a b c)\narray.pop x y\necho $y\n=\n c\n\n\n\n\narray.push\n\n\nAdds an element to the end of an array.\n\n\nx=()\narray.push x foo\n\n\n\n\narray.shift\n\n\nRemoves and returns the first element from array $1 and optionally stores it in $2\n\n\nx=(a b c)\narray.shift x y\necho $y\n=\n a\n\n\n\n\narray.unshift\n\n\nAdds an element to the beginning of the array.\n\n\nx=(b c)\narray.unshift x a\n\n\n\n\n\nhash.keys\n\n\nReturns the keys of a hash / associative array.\n\n\ndeclare -A foo=(\n  [a]=1\n  [b]=2\n  [c]=3\n)\n\nhash.keys \nfoo\n\n=\n a b c\n\nx=($(hash.keys \nfoo\n))\necho \n${x[1]}\n\n=\n b", 
            "title": "arrays"
        }, 
        {
            "location": "/functions/arrays/#array-functions", 
            "text": "functions/arrays.sh  contains functions to help interact with arrays and hashes/maps.", 
            "title": "Array Functions"
        }, 
        {
            "location": "/functions/arrays/#arraycontains", 
            "text": "Reports true if element exists in an array.  x=(foo bar baz)\nif array.contains  x   foo  ; then\n  echo  Exists \nfi", 
            "title": "array.contains"
        }, 
        {
            "location": "/functions/arrays/#arrayjoin", 
            "text": "Joins an array into a string.  x=(foo bar baz)\narray.join x ,\n=  foo,bar,baz", 
            "title": "array.join"
        }, 
        {
            "location": "/functions/arrays/#arraylength", 
            "text": "Returns the length of an array.  x=(a b c)\narray.length x\n=  3", 
            "title": "array.length"
        }, 
        {
            "location": "/functions/arrays/#arraypop", 
            "text": "Removes and the last element from array $1 and optionally stores it in $2  x=(a b c)\narray.pop x y\necho $y\n=  c", 
            "title": "array.pop"
        }, 
        {
            "location": "/functions/arrays/#arraypush", 
            "text": "Adds an element to the end of an array.  x=()\narray.push x foo", 
            "title": "array.push"
        }, 
        {
            "location": "/functions/arrays/#arrayshift", 
            "text": "Removes and returns the first element from array $1 and optionally stores it in $2  x=(a b c)\narray.shift x y\necho $y\n=  a", 
            "title": "array.shift"
        }, 
        {
            "location": "/functions/arrays/#arrayunshift", 
            "text": "Adds an element to the beginning of the array.  x=(b c)\narray.unshift x a", 
            "title": "array.unshift"
        }, 
        {
            "location": "/functions/arrays/#hashkeys", 
            "text": "Returns the keys of a hash / associative array.  declare -A foo=(\n  [a]=1\n  [b]=2\n  [c]=3\n)\n\nhash.keys  foo \n=  a b c\n\nx=($(hash.keys  foo ))\necho  ${x[1]} \n=  b", 
            "title": "hash.keys"
        }, 
        {
            "location": "/functions/consul/", 
            "text": "Consul Functions\n\n\n\n\n\n\nConsul Functions\n\n\nconsul.get_nodes\n\n\nconsul.get_services\n\n\nconsul.get_kv\n\n\nconsul.set_kv\n\n\nconsul.delete_kv\n\n\n\n\n\n\n\n\n\n\nconsul/consul.sh\n contains helper functions for the Consul resources\n\n\nconsul.get_nodes\n\n\nReturns a list of nodes. Results are stored in \n$consul_nodes\n hash.\n\n\nOption \n--service\n: Optional. Limits results to a set of services.\n\n\nconsul.get_nodes --service consul\n\nconsul_nodes[consul-01]=\n192.168.1.1\n\nconsul_nodes[consul-02]=\n192.168.1.2\n\nconsul_nodes[consul-03]=\n192.168.1.3\n\nconsul_nodes[consul-01|port]=\n8300\n\nconsul_nodes[consul-02|port]=\n8300\n\nconsul_nodes[consul-03|port]=\n8300\n\n\n\n\n\nconsul.get_services\n\n\nReturns a list of services in the Consul catalog. Results are stored in \n$consul_services array\n.\n\n\nconsul.get_services\n\nconsul_services=(consul mysql)\n\n\n\n\nconsul.get_kv\n\n\nRetrieves the value of a key.\n\n\nconsul.get_kv --key foobar\n=\n barfoo\n\n\n\n\nconsul.set_kv\n\n\nSets a value for a key.\n\n\nconsul.set_kv --key foobar --value barfoo\n\n\n\n\nconsul.delete_kv\n\n\nDeletes a key.\n\n\nconsul.delete_kv --key foobar", 
            "title": "consul"
        }, 
        {
            "location": "/functions/consul/#consul-functions", 
            "text": "Consul Functions  consul.get_nodes  consul.get_services  consul.get_kv  consul.set_kv  consul.delete_kv      consul/consul.sh  contains helper functions for the Consul resources", 
            "title": "Consul Functions"
        }, 
        {
            "location": "/functions/consul/#consulget_nodes", 
            "text": "Returns a list of nodes. Results are stored in  $consul_nodes  hash.  Option  --service : Optional. Limits results to a set of services.  consul.get_nodes --service consul\n\nconsul_nodes[consul-01]= 192.168.1.1 \nconsul_nodes[consul-02]= 192.168.1.2 \nconsul_nodes[consul-03]= 192.168.1.3 \nconsul_nodes[consul-01|port]= 8300 \nconsul_nodes[consul-02|port]= 8300 \nconsul_nodes[consul-03|port]= 8300", 
            "title": "consul.get_nodes"
        }, 
        {
            "location": "/functions/consul/#consulget_services", 
            "text": "Returns a list of services in the Consul catalog. Results are stored in  $consul_services array .  consul.get_services\n\nconsul_services=(consul mysql)", 
            "title": "consul.get_services"
        }, 
        {
            "location": "/functions/consul/#consulget_kv", 
            "text": "Retrieves the value of a key.  consul.get_kv --key foobar\n=  barfoo", 
            "title": "consul.get_kv"
        }, 
        {
            "location": "/functions/consul/#consulset_kv", 
            "text": "Sets a value for a key.  consul.set_kv --key foobar --value barfoo", 
            "title": "consul.set_kv"
        }, 
        {
            "location": "/functions/consul/#consuldelete_kv", 
            "text": "Deletes a key.  consul.delete_kv --key foobar", 
            "title": "consul.delete_kv"
        }, 
        {
            "location": "/functions/exec/", 
            "text": "Exec Functions\n\n\nfunctions/exec.sh\n contains functions to help execute commands.\n\n\nexec.capture_error\n\n\nTakes a command as input, prints the command, and detects if anything was written to \nstderr\n. If there was, the error is printed to \nstderr\n again, and if \nWAFFLES_EXIT_ON_ERROR\n is set, Waffles halts.\n\n\nexec.capture_error apt-get update\n\n\n\n\nwaffles.command_exists\n\n\nA simple wrapper around \nwhich\n.\n\n\nif [[ waffles.command_exists apt-get ]]; then\n  log.info \nWe're on a Debian-based system.\n\nfi\n\n\n\n\nexec.mute\n\n\nPrints the command being run, but suppresses the command output.\n\n\nexec.mute apt-get update\n\n\n\n\nexec.sudo\n\n\nRuns a command as another user via sudo:\n\n\nexec.sudo username tar xzvf foobar.tar.gz", 
            "title": "exec"
        }, 
        {
            "location": "/functions/exec/#exec-functions", 
            "text": "functions/exec.sh  contains functions to help execute commands.", 
            "title": "Exec Functions"
        }, 
        {
            "location": "/functions/exec/#execcapture_error", 
            "text": "Takes a command as input, prints the command, and detects if anything was written to  stderr . If there was, the error is printed to  stderr  again, and if  WAFFLES_EXIT_ON_ERROR  is set, Waffles halts.  exec.capture_error apt-get update", 
            "title": "exec.capture_error"
        }, 
        {
            "location": "/functions/exec/#wafflescommand_exists", 
            "text": "A simple wrapper around  which .  if [[ waffles.command_exists apt-get ]]; then\n  log.info  We're on a Debian-based system. \nfi", 
            "title": "waffles.command_exists"
        }, 
        {
            "location": "/functions/exec/#execmute", 
            "text": "Prints the command being run, but suppresses the command output.  exec.mute apt-get update", 
            "title": "exec.mute"
        }, 
        {
            "location": "/functions/exec/#execsudo", 
            "text": "Runs a command as another user via sudo:  exec.sudo username tar xzvf foobar.tar.gz", 
            "title": "exec.sudo"
        }, 
        {
            "location": "/functions/ini/", 
            "text": "ini Functions\n\n\nfunctions/ini_file.sh\n contains functions to work with ini files.\n\n\nFor the following functions, consider the example ini file:\n\n\nopt=a global option\nsingleglobal\n[section 1]\nopt=a section 1 option\n[section 2]\nopt=a section 2 option\n\n\n\n\nini_file.get_option\n\n\nReturns the line in an ini file matching the parameters.\n\n\n$ ini_file.get_option \nfile.ini\n \nsection 1\n \nopt\n\nopt=a section 1 option\n$ ini_file.get_option \nfile.ini\n \nsection 2\n \nopt\n\nopt=a section 2 option\n$ ini_file.get_option \nfile.ini\n \n__none__\n \nopt\n\nopt=a global option\n\n\n\n\nini_file.options_has_value\n\n\nReturns \n0\n if the ini file contains the requested value.\n\n\n$ ini_file.option_has_value \nfile.ini\n \nsection 1\n \nopt\n \na section 1 option\n\n0\n$ ini_file.option_has_value \nfile.ini\n \n__none__\n \nopt\n \na global option\n\n0\n$ ini_file.option_has_value \nfile.ini\n \n__none__\n \nglobal\n \na global value\n\n1\n\n\n\n\nini_file.has_section\n\n\nReturns \n0\n if the ini file contains the requested section.\n\n\n$ ini_file.has_section \nfile.ini\n \nsection 1\n\n0\n$ ini_file.has_section \nfile.ini\n \nsection 3\n\n1\n\n\n\n\nini_file.remove\n\n\nRemoves a single ini entry.\n\n\n$ ini_file.remove \nfile.ini\n \n__none__\n \nsingleglobal\n\n$ ini_file.remove \nfile.ini\n \nsection 1\n \nopt\n\n\n\n\n\nini_file.remove_section\n\n\nRemoves an entire ini section.\n\n\n$ ini_file.remove_section \nfile.ini\n \nsection 1\n\n\n\n\n\nini_file.set\n\n\nSets an entry in an ini file.\n\n\n$ ini_file.set \nfile.ini\n \nsection 1\n \nopt\n \na section 1 option\n\n$ ini_file.set \nfile.ini\n \n__none__\n \nsingleglobal\n \n__none__\n\n$ ini_file.set \nfile.ini\n \nsection 1\n \nopt\n \na section 1 option - modified", 
            "title": "ini"
        }, 
        {
            "location": "/functions/ini/#ini-functions", 
            "text": "functions/ini_file.sh  contains functions to work with ini files.  For the following functions, consider the example ini file:  opt=a global option\nsingleglobal\n[section 1]\nopt=a section 1 option\n[section 2]\nopt=a section 2 option", 
            "title": "ini Functions"
        }, 
        {
            "location": "/functions/ini/#ini_fileget_option", 
            "text": "Returns the line in an ini file matching the parameters.  $ ini_file.get_option  file.ini   section 1   opt \nopt=a section 1 option\n$ ini_file.get_option  file.ini   section 2   opt \nopt=a section 2 option\n$ ini_file.get_option  file.ini   __none__   opt \nopt=a global option", 
            "title": "ini_file.get_option"
        }, 
        {
            "location": "/functions/ini/#ini_fileoptions_has_value", 
            "text": "Returns  0  if the ini file contains the requested value.  $ ini_file.option_has_value  file.ini   section 1   opt   a section 1 option \n0\n$ ini_file.option_has_value  file.ini   __none__   opt   a global option \n0\n$ ini_file.option_has_value  file.ini   __none__   global   a global value \n1", 
            "title": "ini_file.options_has_value"
        }, 
        {
            "location": "/functions/ini/#ini_filehas_section", 
            "text": "Returns  0  if the ini file contains the requested section.  $ ini_file.has_section  file.ini   section 1 \n0\n$ ini_file.has_section  file.ini   section 3 \n1", 
            "title": "ini_file.has_section"
        }, 
        {
            "location": "/functions/ini/#ini_fileremove", 
            "text": "Removes a single ini entry.  $ ini_file.remove  file.ini   __none__   singleglobal \n$ ini_file.remove  file.ini   section 1   opt", 
            "title": "ini_file.remove"
        }, 
        {
            "location": "/functions/ini/#ini_fileremove_section", 
            "text": "Removes an entire ini section.  $ ini_file.remove_section  file.ini   section 1", 
            "title": "ini_file.remove_section"
        }, 
        {
            "location": "/functions/ini/#ini_fileset", 
            "text": "Sets an entry in an ini file.  $ ini_file.set  file.ini   section 1   opt   a section 1 option \n$ ini_file.set  file.ini   __none__   singleglobal   __none__ \n$ ini_file.set  file.ini   section 1   opt   a section 1 option - modified", 
            "title": "ini_file.set"
        }, 
        {
            "location": "/functions/logging/", 
            "text": "Logging Functions\n\n\nfunctions/logging.sh\n contains functions to help with logging.\n\n\nlog.debug\n\n\nPrints a log message at \ndebug\n level. This message will only appear if run in DEBUG mode.\n\n\nlog.debug \nFoobar\n\n\n\n\n\nlog.error\n\n\nPrints a log message at \nerror\n level.\n\n\nlog.error \nFoobar\n\n\n\n\n\nlog.info\n\n\nPrints a log message at \ninfo\n level.\n\n\nlog.info \nFoobar\n\n\n\n\n\nlog.warn\n\n\nPrints a log message at \nwarn\n level.\n\n\nlog.warn \nFoobar", 
            "title": "logging"
        }, 
        {
            "location": "/functions/logging/#logging-functions", 
            "text": "functions/logging.sh  contains functions to help with logging.", 
            "title": "Logging Functions"
        }, 
        {
            "location": "/functions/logging/#logdebug", 
            "text": "Prints a log message at  debug  level. This message will only appear if run in DEBUG mode.  log.debug  Foobar", 
            "title": "log.debug"
        }, 
        {
            "location": "/functions/logging/#logerror", 
            "text": "Prints a log message at  error  level.  log.error  Foobar", 
            "title": "log.error"
        }, 
        {
            "location": "/functions/logging/#loginfo", 
            "text": "Prints a log message at  info  level.  log.info  Foobar", 
            "title": "log.info"
        }, 
        {
            "location": "/functions/logging/#logwarn", 
            "text": "Prints a log message at  warn  level.  log.warn  Foobar", 
            "title": "log.warn"
        }, 
        {
            "location": "/functions/mysql/", 
            "text": "MySQL Functions\n\n\n\n\n\n\nMySQL Functions\n\n\nmysql.admin_password_set?\n\n\nmysql.mycnf\n\n\n\n\n\n\n\n\n\n\nlib/mysql/mysql.sh\n contains helper functions for the MySQL resources\n\n\nmysql.admin_password_set?\n\n\nA simple function that checks if the MySQL service has an admin password set.\n\n\nmysql.mycnf\n\n\nA function that generates a \n.my.cnf\n file.\n\n\nmysql.mycnf --filename \n/root/.my.cnf\n --user root --password password\n\n\n\n\nThis isn't a first-class resource because it simply builds on other resources.", 
            "title": "mysql"
        }, 
        {
            "location": "/functions/mysql/#mysql-functions", 
            "text": "MySQL Functions  mysql.admin_password_set?  mysql.mycnf      lib/mysql/mysql.sh  contains helper functions for the MySQL resources", 
            "title": "MySQL Functions"
        }, 
        {
            "location": "/functions/mysql/#mysqladmin_password_set", 
            "text": "A simple function that checks if the MySQL service has an admin password set.", 
            "title": "mysql.admin_password_set?"
        }, 
        {
            "location": "/functions/mysql/#mysqlmycnf", 
            "text": "A function that generates a  .my.cnf  file.  mysql.mycnf --filename  /root/.my.cnf  --user root --password password  This isn't a first-class resource because it simply builds on other resources.", 
            "title": "mysql.mycnf"
        }, 
        {
            "location": "/functions/options/", 
            "text": "Options Options\n\n\n\n\n\n\nOptions Options\n\n\nwaffles.options.create_option\n\n\nwaffles.options.create_mv_option\n\n\nwaffles.options.parse_options\n\n\n\n\n\n\n\n\n\n\nfunctions/options.sh\n contains functions related to parsing resource options.\n\n\nwaffles.options.create_option\n\n\nThis function creates an option in a waffles.resource.\n\n\nlocal -A options\nwaffles.options.create_option state   \npresent\n\nwaffles.options.create_option package \n__required__\n\nwaffles.options.create_option version\nwaffles.options.parse_options \n$@\n\n\n\n\n\nTo successfully create a set of options:\n\n\n\n\nA local \noptions\n variable must be created. If not, the options will be appended to the last resource declared.\n\n\nwaffles.options.create_option\n is used with the first argument being the option name and the second argument being an optional default value.\n\n\nIf the default value is \n__required__\n, Waffles will error and halt if the option was not set.\n\n\n\n\nwaffles.options.create_mv_option\n\n\nThis function creates a multi-value option. These types of options can be specified multiple times. In order to use, you must declare\nan array of the same name as the option. For example, the \naugeas.mail_alias\n resource looks like this:\n\n\nlocal -A options\nlocal -a destination\nwaffles.options.create_option    state       \npresent\n\nwaffles.options.create_option    account     \n__required__\n\nwaffles.options.create_mv_option destination \n__required__\n\nwaffles.options.create_option    file        \n/etc/aliases\n\nwaffles.options.parse_options    \n$@\n\n\n\n\n\nNow when declaring an alias, you can do:\n\n\naugeas.mail_alias --root --destination jdoe --destination jsmith --destination foobar\n\n\n\n\nwaffles.options.parse_options\n\n\nThis function cycles through all options that were given in a declared waffles.resource. It will report if any required options were not set.", 
            "title": "options"
        }, 
        {
            "location": "/functions/options/#options-options", 
            "text": "Options Options  waffles.options.create_option  waffles.options.create_mv_option  waffles.options.parse_options      functions/options.sh  contains functions related to parsing resource options.", 
            "title": "Options Options"
        }, 
        {
            "location": "/functions/options/#wafflesoptionscreate_option", 
            "text": "This function creates an option in a waffles.resource.  local -A options\nwaffles.options.create_option state    present \nwaffles.options.create_option package  __required__ \nwaffles.options.create_option version\nwaffles.options.parse_options  $@   To successfully create a set of options:   A local  options  variable must be created. If not, the options will be appended to the last resource declared.  waffles.options.create_option  is used with the first argument being the option name and the second argument being an optional default value.  If the default value is  __required__ , Waffles will error and halt if the option was not set.", 
            "title": "waffles.options.create_option"
        }, 
        {
            "location": "/functions/options/#wafflesoptionscreate_mv_option", 
            "text": "This function creates a multi-value option. These types of options can be specified multiple times. In order to use, you must declare\nan array of the same name as the option. For example, the  augeas.mail_alias  resource looks like this:  local -A options\nlocal -a destination\nwaffles.options.create_option    state        present \nwaffles.options.create_option    account      __required__ \nwaffles.options.create_mv_option destination  __required__ \nwaffles.options.create_option    file         /etc/aliases \nwaffles.options.parse_options     $@   Now when declaring an alias, you can do:  augeas.mail_alias --root --destination jdoe --destination jsmith --destination foobar", 
            "title": "waffles.options.create_mv_option"
        }, 
        {
            "location": "/functions/options/#wafflesoptionsparse_options", 
            "text": "This function cycles through all options that were given in a declared waffles.resource. It will report if any required options were not set.", 
            "title": "waffles.options.parse_options"
        }, 
        {
            "location": "/functions/resource/", 
            "text": "Resource Functions\n\n\n\n\n\n\nResource Functions\n\n\nwaffles.resource.check_dependencies\n\n\nwaffles.resource.process\n\n\nwaffles.resource.read\n\n\nwaffles.resource.create\n\n\nwaffles.resource.update\n\n\nwaffles.resource.delete\n\n\n\n\n\n\n\n\n\n\nfunctions/resource.sh\n contains functions that coordinate resource execution. These functions should only be used when building resources.\n\n\nwaffles.resource.check_dependencies\n\n\nThis function takes an array of commands that the resource is dependent upon. It then checks if those commands exist:\n\n\n# Check if all dependencies are installed\nlocal _wrd=(\napt-add-repository\n \napt-get\n \nsed\n)\nif ! waffles.resource.check_dependencies \n${_wrd[@]}\n ; then\n  return 2\nfi\n\n\n\n\nwaffles.resource.process\n\n\nThis function does several things:\n\n\n\n\nCalls \nwaffles.resource.read\n, which in turn calls \ncalling_waffles.resource.read\n.\n\n\nCompares the resource state versus the state that the resource has been requested to be in.\n\n\nDepending on the results of the above, calls \nwaffles.resource.x\n, which in turn calls \ncalling_waffles.resource.x\n.\n\n\n\n\nThis function requires two arguments:\n\n\n\n\n$1\n: The resource type (\napt.pkg\n)\n\n\n$2\n: The resource name (\napache2\n)\n\n\n\n\nwaffles.resource.read\n\n\nCalls \nresource_type.read\n. May also perform pre and post actions.\n\n\nwaffles.resource.create\n\n\nCalls \nresource_type.create\n.\n\n\nAlso flags that a resource has changed and increments the amount of total changes made throughout the Waffles run.\n\n\nwaffles.resource.update\n\n\nCalls \nresource_type.update\n.\n\n\nAlso flags that a resource has changed and increments the amount of total changes made throughout the Waffles run.\n\n\nwaffles.resource.delete\n\n\nCalls \nresource_type.delete\n.\n\n\nAlso flags that a resource has changed and increments the amount of total changes made throughout the Waffles run.", 
            "title": "resource"
        }, 
        {
            "location": "/functions/resource/#resource-functions", 
            "text": "Resource Functions  waffles.resource.check_dependencies  waffles.resource.process  waffles.resource.read  waffles.resource.create  waffles.resource.update  waffles.resource.delete      functions/resource.sh  contains functions that coordinate resource execution. These functions should only be used when building resources.", 
            "title": "Resource Functions"
        }, 
        {
            "location": "/functions/resource/#wafflesresourcecheck_dependencies", 
            "text": "This function takes an array of commands that the resource is dependent upon. It then checks if those commands exist:  # Check if all dependencies are installed\nlocal _wrd=( apt-add-repository   apt-get   sed )\nif ! waffles.resource.check_dependencies  ${_wrd[@]}  ; then\n  return 2\nfi", 
            "title": "waffles.resource.check_dependencies"
        }, 
        {
            "location": "/functions/resource/#wafflesresourceprocess", 
            "text": "This function does several things:   Calls  waffles.resource.read , which in turn calls  calling_waffles.resource.read .  Compares the resource state versus the state that the resource has been requested to be in.  Depending on the results of the above, calls  waffles.resource.x , which in turn calls  calling_waffles.resource.x .   This function requires two arguments:   $1 : The resource type ( apt.pkg )  $2 : The resource name ( apache2 )", 
            "title": "waffles.resource.process"
        }, 
        {
            "location": "/functions/resource/#wafflesresourceread", 
            "text": "Calls  resource_type.read . May also perform pre and post actions.", 
            "title": "waffles.resource.read"
        }, 
        {
            "location": "/functions/resource/#wafflesresourcecreate", 
            "text": "Calls  resource_type.create .  Also flags that a resource has changed and increments the amount of total changes made throughout the Waffles run.", 
            "title": "waffles.resource.create"
        }, 
        {
            "location": "/functions/resource/#wafflesresourceupdate", 
            "text": "Calls  resource_type.update .  Also flags that a resource has changed and increments the amount of total changes made throughout the Waffles run.", 
            "title": "waffles.resource.update"
        }, 
        {
            "location": "/functions/resource/#wafflesresourcedelete", 
            "text": "Calls  resource_type.delete .  Also flags that a resource has changed and increments the amount of total changes made throughout the Waffles run.", 
            "title": "waffles.resource.delete"
        }, 
        {
            "location": "/functions/strings/", 
            "text": "String Functions\n\n\nfunctions/strings.sh\n contains functions to help manipulate strings.\n\n\nstring.split\n\n\nSplits a string into an array. Stores the result in \n__split\n. The delimiter can be multi-character.\n\n\nstring.split \nfoo/bar\n, \n/\n\nlog.info $__split[1] # bar\n\n\n\n\nstring.trim\n\n\nTrims the whitespace on both sides of a string.\n\n\ntrimmed=$(string.trim \n   foobar   \n\nlog.info \n$trimmed\n # foobar", 
            "title": "strings"
        }, 
        {
            "location": "/functions/strings/#string-functions", 
            "text": "functions/strings.sh  contains functions to help manipulate strings.", 
            "title": "String Functions"
        }, 
        {
            "location": "/functions/strings/#stringsplit", 
            "text": "Splits a string into an array. Stores the result in  __split . The delimiter can be multi-character.  string.split  foo/bar ,  / \nlog.info $__split[1] # bar", 
            "title": "string.split"
        }, 
        {
            "location": "/functions/strings/#stringtrim", 
            "text": "Trims the whitespace on both sides of a string.  trimmed=$(string.trim     foobar    \nlog.info  $trimmed  # foobar", 
            "title": "string.trim"
        }, 
        {
            "location": "/functions/utils/", 
            "text": "Utility Functions\n\n\nfunctions/utils.sh\n contains utility functions to help with using Waffles.\n\n\nwaffles.build_ini_file\n\n\nBuilds an ini file from a given hash.\n\n\nwaffles.build_ini_file data_openstack_keystone_settings /etc/keystone/keystone.conf\n\n\n\n\nwaffles.command_exists\n\n\nA simple wrapper around \nwhich\n.\n\n\nif [[ waffles.command_exists apt-get ]]; then\n  log.info \nWe're on a Debian-based system.\n\nfi\n\n\n\n\nwaffles.dir\n\n\nA simple function that returns the current directory of the script currently being run.\n\n\nwaffles.popd\n\n\nAn alias for \nexec.mute popd $1\n\n\nwaffles.pushd\n\n\nAn alias for \nexec.mute pushd $1", 
            "title": "utils"
        }, 
        {
            "location": "/functions/utils/#utility-functions", 
            "text": "functions/utils.sh  contains utility functions to help with using Waffles.", 
            "title": "Utility Functions"
        }, 
        {
            "location": "/functions/utils/#wafflesbuild_ini_file", 
            "text": "Builds an ini file from a given hash.  waffles.build_ini_file data_openstack_keystone_settings /etc/keystone/keystone.conf", 
            "title": "waffles.build_ini_file"
        }, 
        {
            "location": "/functions/utils/#wafflescommand_exists", 
            "text": "A simple wrapper around  which .  if [[ waffles.command_exists apt-get ]]; then\n  log.info  We're on a Debian-based system. \nfi", 
            "title": "waffles.command_exists"
        }, 
        {
            "location": "/functions/utils/#wafflesdir", 
            "text": "A simple function that returns the current directory of the script currently being run.", 
            "title": "waffles.dir"
        }, 
        {
            "location": "/functions/utils/#wafflespopd", 
            "text": "An alias for  exec.mute popd $1", 
            "title": "waffles.popd"
        }, 
        {
            "location": "/functions/utils/#wafflespushd", 
            "text": "An alias for  exec.mute pushd $1", 
            "title": "waffles.pushd"
        }, 
        {
            "location": "/resources/apt.key/", 
            "text": "Name\n\n\napt.key\n\n\nDescription\n\n\nManages apt keys\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name. Required.\n\n\nkey: The key to import. Required if no remote_keyfile.\n\n\nkeyserver: The key server. Required if no remote_keyfile.\n\n\nremote_keyfile: A remote key to import. Required if no key or keyserver.\n\n\n\n\nExample\n\n\napt.key --name \nfoobar\n --key 1C4CBDCDCD2EFD2A", 
            "title": "apt.key"
        }, 
        {
            "location": "/resources/apt.key/#name", 
            "text": "apt.key", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.key/#description", 
            "text": "Manages apt keys", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.key/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name. Required.  key: The key to import. Required if no remote_keyfile.  keyserver: The key server. Required if no remote_keyfile.  remote_keyfile: A remote key to import. Required if no key or keyserver.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.key/#example", 
            "text": "apt.key --name  foobar  --key 1C4CBDCDCD2EFD2A", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apt.pkg/", 
            "text": "Name\n\n\napt.pkg\n\n\nDescription\n\n\nManage packages via apt.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npackage: The name of the package. Required.\n\n\nname: Alias for package.\n\n\nversion: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.\n\n\n\n\nExample\n\n\napt.pkg --package tmux --version latest", 
            "title": "apt.pkg"
        }, 
        {
            "location": "/resources/apt.pkg/#name", 
            "text": "apt.pkg", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.pkg/#description", 
            "text": "Manage packages via apt.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.pkg/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  package: The name of the package. Required.  name: Alias for package.  version: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.pkg/#example", 
            "text": "apt.pkg --package tmux --version latest", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apt.ppa/", 
            "text": "Name\n\n\napt.ppa\n\n\nDescription\n\n\nManages PPA repositories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nppa: The PPA. Required.\n\n\nrefresh: run apt-get update if the PPA was modified. Default: true.\n\n\n\n\nExample\n\n\napt.ppa --ppa chris-lea/redis-server", 
            "title": "apt.ppa"
        }, 
        {
            "location": "/resources/apt.ppa/#name", 
            "text": "apt.ppa", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.ppa/#description", 
            "text": "Manages PPA repositories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.ppa/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  ppa: The PPA. Required.  refresh: run apt-get update if the PPA was modified. Default: true.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.ppa/#example", 
            "text": "apt.ppa --ppa chris-lea/redis-server", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apt.source/", 
            "text": "Name\n\n\napt.source\n\n\nDescription\n\n\nManage /etc/apt/sources.list.d entries.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the apt repo. Required.\n\n\nuri: The URI of the apt repo. Required.\n\n\ndistribution: The distribution of the apt repo. Required.\n\n\ncomponent: The component of the apt repo. Optional.\n\n\ninclude_src: Whether to include the source repo. Default: false.\n\n\nrefresh: run apt-get update if the source was modified. Default: true.\n\n\n\n\nExample\n\n\napt.source --name lxc --uri http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu \\\n                  --distribution trusty --component main", 
            "title": "apt.source"
        }, 
        {
            "location": "/resources/apt.source/#name", 
            "text": "apt.source", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.source/#description", 
            "text": "Manage /etc/apt/sources.list.d entries.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.source/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the apt repo. Required.  uri: The URI of the apt repo. Required.  distribution: The distribution of the apt repo. Required.  component: The component of the apt repo. Optional.  include_src: Whether to include the source repo. Default: false.  refresh: run apt-get update if the source was modified. Default: true.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.source/#example", 
            "text": "apt.source --name lxc --uri http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu \\\n                  --distribution trusty --component main", 
            "title": "Example"
        }, 
        {
            "location": "/resources/augeas.generic/", 
            "text": "Name\n\n\naugeas.generic\n\n\nDescription\n\n\nChange a file using Augeas\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the resource. Required. namevar.\n\n\nlens: The Augeas lens to use without the .lns extension. Required.\n\n\nlens_path: A custom directory that contain lenses. Optional. Multi-var.\n\n\ncommand: A single Augeas command to run. Optional. Multi-var.\n\n\nonlyif: A match conditional to check prior to running commands. If \ntrue\n, the command(s) are run. Optional.\n\n\nnotif: The same as \nonlyif\n but when the match should fail. Optional.\n\n\nfile: The file to modify. Required. namevar.\n\n\n\n\nonlyif / notif Conditional Tests\n\n\nonlyif\n and \nnotif\n tests have the following format:\n\n\n--onlyif \npath\n \nfunction\n \noperator\n \ncomparison\n\n\n\n\n\nSize\n\n\nSize compares the amount of matches.\n\n\n\n\nsize -lt 1\n\n\nsize -gt 1\n\n\nAny numerical comparisons\n\n\n\n\nPath\n\n\n\n\n\n\nWill compare the returned path(s) with a string:\n\n\n\n\n\n\npath not_include \nstring\n\n\n\n\npath include \nstring\n\n\npath is \nstring\n\n\npath is_not \nstring\n\n\n\n\nResult\n\n\nResult will compare the returned result(s) with a string:\n\n\n\n\nresult not_include \nstring\n\n\nresult include \nstring\n\n\nresult is \nstring\n\n\nresult is_not \nstring\n\n\n\n\nConditional Test Examples\n\n\nAssume \n/files/etc/hosts\n:\n\n\n\n\n*/ipaddr[. =~ regexp(\"127.*\")]\n\n\n*/ipaddr[. =~ regexp(\"127.*\")] size -lt 1\n\n\n*/ipaddr[. =~ regexp(\"127.*\")] size -gt 1\n\n\n*/ipaddr[. =~ regexp(\"127.*\")] path not_include 127.0.0.1\n\n\n*/ipaddr[. = \"127.0.0.1\"]/../canonical result include localhost\n\n\n\n\nExample\n\n\naugeas.generic --name test --lens Hosts --file /root/hosts \\\n  --command \nset *[canonical = 'localhost'][1]/ipaddr '10.3.3.27'\n \\\n  --onlyif \n*/ipaddr[. = '127.0.0.1']/../canonical result include 'localhost'\n\n\naugeas.generic --name test2 --lens Hosts --file /root/hosts \\\n  --command \nset 0/ipaddr '8.8.8.8'\n \\\n  --command \nset 0/canonical 'google.com'\n \\\n  --onlyif \n*/ipaddr[. = '8.8.8.8'] result not_include '8.8.8.8'\n\n\naugeas.generic --name test3 --lens Hosts --file /root/hosts \\\n  --command \nset 0/ipaddr '1.1.1.1'\n \\\n  --command \nset 0/canonical 'foobar.com'\n \\\n  --onlyif \n*/ipaddr[. = '1.1.1.1'] path not_include 'ipaddr'\n\n\naugeas.generic --name test4 --lens Hosts --file /root/hosts \\\n  --command \nset 0/ipaddr '2.2.2.2'\n \\\n  --command \nset 0/canonical 'barfoo.com'\n \\\n  --onlyif \n*/ipaddr[. = '2.2.2.2'] size -eq 0\n\n\naugeas.generic --name test5 --lens Hosts --file /root/hosts \\\n  --command \nset 0/ipaddr '3.3.3.3'\n \\\n  --command \nset 0/canonical 'bazbar.com'\n \\\n  --onlyif \n*/ipaddr[. = '3.3.3.3'] size -lt 1\n\n\n\n\n\n# Declare the resource title\n  waffles_resource=\"augeas.generic\"\n\n\n# Check if all dependencies are installed\n  local _wrd=(\"augtool\" \"grep\" \"sed\")\n  if ! waffles.resource.check_dependencies \"${_wrd[@]}\" ; then\n    return 2\n  fi\n\n\n# Resource Options\n  local -A options\n  local -a command=()\n  local -a lens_path=()\n  waffles.options.create_option state        \"present\"\n  waffles.options.create_option name         \"\nrequired\n\"\n  waffles.options.create_option lens         \"\nrequired\n\"\n  waffles.options.create_mv_option command   \"\nrequired\n\"\n  waffles.options.create_option file         \"\nrequired\n\"\n  waffles.options.create_mv_option lens_path\n  waffles.options.create_option onlyif\n  waffles.options.create_option notif\n  waffles.options.parse_options \"$@\"\n  if [[ $? != 0 ]]; then\n    return $?\n  fi\n\n\n# Local Variables\n  local _name=\"${options[name]}\"\n  local _file=\"${options[file]}\"\n  local _file_path=\"/files$_file\"\n  local _lens=\"${options[lens]}\"\n  local -a _augeas_init=()\n  local _lens_path=\"\"\n\n\n# Internal Resource Configuration\n  if [[ $(array.length lens_path) -gt 0 ]]; then\n    for lp in \"${lens_path[@]}\"; do\n      _lens_path=\"-I $lp \"\n    done\n  fi\n\n\n# Prep the augtool session\n  _augeas_init+=(\"set /augeas/load/$_lens/lens ${_lens}.lns\")\n  _augeas_init+=(\"set /augeas/load/$_lens/incl $_file\")\n  _augeas_init+=(\"load\")\n\n\n# Process the resource\n  waffles.resource.process $waffles_resource \"$_name\"\n}\n\n\nlocal _test _return _return_expected _commands _pid _error _testpath\n  local _path _function _operator _comparison _c\n  local -a _parts=()\n  local -a _augeas_commands=( \"${_augeas_init[@]}\" )\n  local _error=\"\"\n  local -a _result=()\n\n\n# If \nonlyif\n or \nnotif\n was specified, check and see the result of the command.\n  if [[ -n ${options[onlyif]} ]] || [[ -n ${options[notif]} ]]; then\n    if [[ -n ${options[onlyif]} ]]; then\n      _return_expected=0\n      _parts=(${options[onlyif]})\n    else\n      _return_expected=1\n      _parts=(${options[notif]})\n    fi\n\n\n# Remove possible surrounding quotes\narray.pop _parts _comparison\n_comparison=$(echo $_comparison | sed -e 's/^\"//' -e 's/\"$//' -e \"s/^'//\" -e \"s/'$//\") || true\n\narray.pop _parts _operator\narray.pop _parts _function\n\n_path=$(array.join _parts \" \")\n_path=\"${_file_path}/$_path\"\n\ncase \"$_function\" in\n  size)\n    _test=\"size\"\n    ;;\n  path)\n    _test=\"path_or_result\"\n    ;;\n  result)\n    _test=\"path_or_result\"\n    ;;\n  *)\n    _test=\"path_exists\"\n    if [[ -n ${options[onlyif]} ]]; then\n      _path=\"${_file_path}/${options[onlyif]}\"\n    else\n      _path=\"${_file_path}/${options[notif]}\"\n    fi\n    ;;\nesac\n\n_augeas_commands+=(\"match $_path\")\n_commands=$(IFS=$'\\n'; echo \"${_augeas_commands[*]}\")\n_pid=$$\n\nfor c in \"${_augeas_commands[@]}\"; do\n  log.debug \"$c\"\ndone\n\nmapfile -t _result \n \n(augtool $_lens_path -A 2\n/tmp/augeas_error.$_pid \n \"$_commands\" | grep -v \"no matches\")\n\nif [[ -s \"/tmp/augeas_error.$_pid\" ]]; then\n  _error=$(\n/tmp/augeas_error.$_pid)\nfi\n\nexec.mute rm /tmp/augeas_error.$_pid\n\nif [[ -n $_error ]]; then\n  log.error \"Augeas error: $_error\"\n  waffles_resource_current_state=\"error\"\n  return\nfi\n\naugeas.generic.test_${_test}\n_return=$?\n\nif [[ $_return == $_return_expected ]]; then\n  waffles_resource_current_state=\"absent\"\n  return\nfi\n\n\n\nelse\n    # Run the set of commands and see if they were successful.\n    for c in \"${command[@]}\"; do\n      _c=($c)\n      _c[1]=\"${_file_path}/${_c[1]}\"\n      c=$(array.join _c \" \")\n\n\n  _augeas_commands+=(\"$c\")\ndone\n_augeas_commands+=(\"save\")\n_augeas_commands+=(\"print /augeas/events/saved\")\n\nfor c in \"${_augeas_commands[@]}\"; do\n  log.debug \"$c\"\ndone\n\n_commands=$(IFS=$'\\n'; echo \"${_augeas_commands[*]}\")\n_pid=$$\n_result=$(augtool $_lens_path -An 2\n/tmp/augeas_error.$_pid \n \"$_commands\" | grep -v Saved)\n\nif [[ -s \"/tmp/augeas_error.$_pid\" ]]; then\n  _error=$(\n/tmp/augeas_error.$_pid)\nfi\n\nif [[ -f \"${_file}.augnew\" ]]; then\n  exec.mute rm \"${_file}.augnew\"\nfi\n\nexec.mute rm /tmp/augeas_error.$_pid\n\nif [[ -n $_error ]]; then\n  log.error \"Augeas error: $_error\"\n  waffles_resource_current_state=\"error\"\n  return\nfi\n\n_return=\"/augeas/events/saved = \\\"$_file_path\\\"\"\nif [[ $_result == $_return  ]]; then\n  waffles_resource_current_state=\"absent\"\n  return\nelif [[ $_result =~ ^error ]]; then\n  log.error \"Error updating $_file.\"\n  waffles_resource_current_state=\"error\"\n  return 1\nfi\n\n\n\nfi\n\n\nwaffles_resource_current_state=\"present\"\n}\n\n\nlocal _result=\"\"\n  local _return=\"\"\n  local _c=\"\"\n  local _pid=\"\"\n  local _error=\"\"\n  local -a _augeas_commands=( \"${_augeas_init[@]}\" )\n\n\n# Run the set of commands and see if they were successful.\n  for c in \"${command[@]}\"; do\n    _c=($c)\n    _c[1]=\"${_file_path}/${_c[1]}\"\n    c=$(array.join _c \" \")\n\n\n_augeas_commands+=(\"$c\")\n\n\n\ndone\n  _augeas_commands+=(\"save\")\n  _augeas_commands+=(\"print /augeas/events/saved\")\n\n\nfor c in \"${_augeas_commands[@]}\"; do\n    log.debug \"$c\"\n  done\n\n\n_commands=$(IFS=$'\\n'; echo \"${_augeas_commands[*]}\")\n  _result=$(augtool $_lens_path -A 2\n/tmp/augeas_error.$_pid \n \"$_commands\" | grep -v Saved)\n\n\nif [[ -s \"/tmp/augeas_error.$_pid\" ]]; then\n    _error=$(\n/tmp/augeas_error.$_pid)\n  fi\n\n\nexec.mute rm /tmp/augeas_error.$_pid\n\n\nif [[ -n $_error ]]; then\n    log.error \"Augeas error: $_error\"\n    return\n  fi\n\n\n_return=\"/augeas/events/saved = \\\"$_file_path\\\"\"\n  if [[ $_result == $_return  ]]; then\n    waffles_resource_current_state=\"absent\"\n    return\n  elif [[ $_result =~ ^error ]]; then\n    log.error \"Error updating $_file.\"\n    return 1\n  fi\n}\n\n\naugeas.generic.create\n}\n\n\nlog.warn \"Unable to perform deletions on Augeas resources.\"\n  return\n}\n\n\nlocal _line_count=$(array.length _result)\n  if [ $_line_count $_operator $_comparison ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n\nlocal _match=\"false\"\n  local _part=\"\"\n  local _c=\"\"\n\n\nfor r in \"${_result[@]+\"${_result[@]}\"}\"; do\n    string.split \"$r\" \" = \"\n    if [[ $_function == \"path\" ]]; then\n      _part=\"${\nsplit[0]}\"\n    else\n      _part=\"${\nsplit[1]}\"\n    fi\n\n\nif [[ $_operator == \"include\" ]] || [[ $_operator == \"not_include\" ]]; then\n  if [[ $_part =~ $_comparison ]]; then\n    _match=\"true\"\n    break\n  fi\nelif [[ $_operator == \"is\" ]] || [[ $_operator == \"is_not\" ]]; then\n  if [[ $_part == $_comparison ]]; then\n    _match=\"true\"\n    break\n  fi\nfi\n\n\n\ndone\n\n\nif [[ $_operator == \"include\" ]] || [[ $_operator == \"is\" ]]; then\n    if [[ $_match == \"true\" ]]; then\n      return 0\n    else\n      return 1\n    fi\n  elif [[ $_operator == \"not_include\" ]] || [[ $_operator == \"is_not\" ]]; then\n    if [[ $_match == \"true\" ]]; then\n      return 1\n    else\n      return 0\n    fi\n  fi\n}\n\n\nlocal _match=\"false\"\n\n\nif [[ $(array.length _result) -gt 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}", 
            "title": "augeas.generic"
        }, 
        {
            "location": "/resources/augeas.generic/#name", 
            "text": "augeas.generic", 
            "title": "Name"
        }, 
        {
            "location": "/resources/augeas.generic/#description", 
            "text": "Change a file using Augeas", 
            "title": "Description"
        }, 
        {
            "location": "/resources/augeas.generic/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the resource. Required. namevar.  lens: The Augeas lens to use without the .lns extension. Required.  lens_path: A custom directory that contain lenses. Optional. Multi-var.  command: A single Augeas command to run. Optional. Multi-var.  onlyif: A match conditional to check prior to running commands. If  true , the command(s) are run. Optional.  notif: The same as  onlyif  but when the match should fail. Optional.  file: The file to modify. Required. namevar.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/augeas.generic/#onlyif-notif-conditional-tests", 
            "text": "onlyif  and  notif  tests have the following format:  --onlyif  path   function   operator   comparison", 
            "title": "onlyif / notif Conditional Tests"
        }, 
        {
            "location": "/resources/augeas.generic/#size", 
            "text": "Size compares the amount of matches.   size -lt 1  size -gt 1  Any numerical comparisons", 
            "title": "Size"
        }, 
        {
            "location": "/resources/augeas.generic/#path", 
            "text": "Will compare the returned path(s) with a string:    path not_include  string   path include  string  path is  string  path is_not  string", 
            "title": "Path"
        }, 
        {
            "location": "/resources/augeas.generic/#result", 
            "text": "Result will compare the returned result(s) with a string:   result not_include  string  result include  string  result is  string  result is_not  string", 
            "title": "Result"
        }, 
        {
            "location": "/resources/augeas.generic/#conditional-test-examples", 
            "text": "Assume  /files/etc/hosts :   */ipaddr[. =~ regexp(\"127.*\")]  */ipaddr[. =~ regexp(\"127.*\")] size -lt 1  */ipaddr[. =~ regexp(\"127.*\")] size -gt 1  */ipaddr[. =~ regexp(\"127.*\")] path not_include 127.0.0.1  */ipaddr[. = \"127.0.0.1\"]/../canonical result include localhost", 
            "title": "Conditional Test Examples"
        }, 
        {
            "location": "/resources/augeas.generic/#example", 
            "text": "augeas.generic --name test --lens Hosts --file /root/hosts \\\n  --command  set *[canonical = 'localhost'][1]/ipaddr '10.3.3.27'  \\\n  --onlyif  */ipaddr[. = '127.0.0.1']/../canonical result include 'localhost' \n\naugeas.generic --name test2 --lens Hosts --file /root/hosts \\\n  --command  set 0/ipaddr '8.8.8.8'  \\\n  --command  set 0/canonical 'google.com'  \\\n  --onlyif  */ipaddr[. = '8.8.8.8'] result not_include '8.8.8.8' \n\naugeas.generic --name test3 --lens Hosts --file /root/hosts \\\n  --command  set 0/ipaddr '1.1.1.1'  \\\n  --command  set 0/canonical 'foobar.com'  \\\n  --onlyif  */ipaddr[. = '1.1.1.1'] path not_include 'ipaddr' \n\naugeas.generic --name test4 --lens Hosts --file /root/hosts \\\n  --command  set 0/ipaddr '2.2.2.2'  \\\n  --command  set 0/canonical 'barfoo.com'  \\\n  --onlyif  */ipaddr[. = '2.2.2.2'] size -eq 0 \n\naugeas.generic --name test5 --lens Hosts --file /root/hosts \\\n  --command  set 0/ipaddr '3.3.3.3'  \\\n  --command  set 0/canonical 'bazbar.com'  \\\n  --onlyif  */ipaddr[. = '3.3.3.3'] size -lt 1   # Declare the resource title\n  waffles_resource=\"augeas.generic\"  # Check if all dependencies are installed\n  local _wrd=(\"augtool\" \"grep\" \"sed\")\n  if ! waffles.resource.check_dependencies \"${_wrd[@]}\" ; then\n    return 2\n  fi  # Resource Options\n  local -A options\n  local -a command=()\n  local -a lens_path=()\n  waffles.options.create_option state        \"present\"\n  waffles.options.create_option name         \" required \"\n  waffles.options.create_option lens         \" required \"\n  waffles.options.create_mv_option command   \" required \"\n  waffles.options.create_option file         \" required \"\n  waffles.options.create_mv_option lens_path\n  waffles.options.create_option onlyif\n  waffles.options.create_option notif\n  waffles.options.parse_options \"$@\"\n  if [[ $? != 0 ]]; then\n    return $?\n  fi  # Local Variables\n  local _name=\"${options[name]}\"\n  local _file=\"${options[file]}\"\n  local _file_path=\"/files$_file\"\n  local _lens=\"${options[lens]}\"\n  local -a _augeas_init=()\n  local _lens_path=\"\"  # Internal Resource Configuration\n  if [[ $(array.length lens_path) -gt 0 ]]; then\n    for lp in \"${lens_path[@]}\"; do\n      _lens_path=\"-I $lp \"\n    done\n  fi  # Prep the augtool session\n  _augeas_init+=(\"set /augeas/load/$_lens/lens ${_lens}.lns\")\n  _augeas_init+=(\"set /augeas/load/$_lens/incl $_file\")\n  _augeas_init+=(\"load\")  # Process the resource\n  waffles.resource.process $waffles_resource \"$_name\"\n}  local _test _return _return_expected _commands _pid _error _testpath\n  local _path _function _operator _comparison _c\n  local -a _parts=()\n  local -a _augeas_commands=( \"${_augeas_init[@]}\" )\n  local _error=\"\"\n  local -a _result=()  # If  onlyif  or  notif  was specified, check and see the result of the command.\n  if [[ -n ${options[onlyif]} ]] || [[ -n ${options[notif]} ]]; then\n    if [[ -n ${options[onlyif]} ]]; then\n      _return_expected=0\n      _parts=(${options[onlyif]})\n    else\n      _return_expected=1\n      _parts=(${options[notif]})\n    fi  # Remove possible surrounding quotes\narray.pop _parts _comparison\n_comparison=$(echo $_comparison | sed -e 's/^\"//' -e 's/\"$//' -e \"s/^'//\" -e \"s/'$//\") || true\n\narray.pop _parts _operator\narray.pop _parts _function\n\n_path=$(array.join _parts \" \")\n_path=\"${_file_path}/$_path\"\n\ncase \"$_function\" in\n  size)\n    _test=\"size\"\n    ;;\n  path)\n    _test=\"path_or_result\"\n    ;;\n  result)\n    _test=\"path_or_result\"\n    ;;\n  *)\n    _test=\"path_exists\"\n    if [[ -n ${options[onlyif]} ]]; then\n      _path=\"${_file_path}/${options[onlyif]}\"\n    else\n      _path=\"${_file_path}/${options[notif]}\"\n    fi\n    ;;\nesac\n\n_augeas_commands+=(\"match $_path\")\n_commands=$(IFS=$'\\n'; echo \"${_augeas_commands[*]}\")\n_pid=$$\n\nfor c in \"${_augeas_commands[@]}\"; do\n  log.debug \"$c\"\ndone\n\nmapfile -t _result    (augtool $_lens_path -A 2 /tmp/augeas_error.$_pid   \"$_commands\" | grep -v \"no matches\")\n\nif [[ -s \"/tmp/augeas_error.$_pid\" ]]; then\n  _error=$( /tmp/augeas_error.$_pid)\nfi\n\nexec.mute rm /tmp/augeas_error.$_pid\n\nif [[ -n $_error ]]; then\n  log.error \"Augeas error: $_error\"\n  waffles_resource_current_state=\"error\"\n  return\nfi\n\naugeas.generic.test_${_test}\n_return=$?\n\nif [[ $_return == $_return_expected ]]; then\n  waffles_resource_current_state=\"absent\"\n  return\nfi  else\n    # Run the set of commands and see if they were successful.\n    for c in \"${command[@]}\"; do\n      _c=($c)\n      _c[1]=\"${_file_path}/${_c[1]}\"\n      c=$(array.join _c \" \")    _augeas_commands+=(\"$c\")\ndone\n_augeas_commands+=(\"save\")\n_augeas_commands+=(\"print /augeas/events/saved\")\n\nfor c in \"${_augeas_commands[@]}\"; do\n  log.debug \"$c\"\ndone\n\n_commands=$(IFS=$'\\n'; echo \"${_augeas_commands[*]}\")\n_pid=$$\n_result=$(augtool $_lens_path -An 2 /tmp/augeas_error.$_pid   \"$_commands\" | grep -v Saved)\n\nif [[ -s \"/tmp/augeas_error.$_pid\" ]]; then\n  _error=$( /tmp/augeas_error.$_pid)\nfi\n\nif [[ -f \"${_file}.augnew\" ]]; then\n  exec.mute rm \"${_file}.augnew\"\nfi\n\nexec.mute rm /tmp/augeas_error.$_pid\n\nif [[ -n $_error ]]; then\n  log.error \"Augeas error: $_error\"\n  waffles_resource_current_state=\"error\"\n  return\nfi\n\n_return=\"/augeas/events/saved = \\\"$_file_path\\\"\"\nif [[ $_result == $_return  ]]; then\n  waffles_resource_current_state=\"absent\"\n  return\nelif [[ $_result =~ ^error ]]; then\n  log.error \"Error updating $_file.\"\n  waffles_resource_current_state=\"error\"\n  return 1\nfi  fi  waffles_resource_current_state=\"present\"\n}  local _result=\"\"\n  local _return=\"\"\n  local _c=\"\"\n  local _pid=\"\"\n  local _error=\"\"\n  local -a _augeas_commands=( \"${_augeas_init[@]}\" )  # Run the set of commands and see if they were successful.\n  for c in \"${command[@]}\"; do\n    _c=($c)\n    _c[1]=\"${_file_path}/${_c[1]}\"\n    c=$(array.join _c \" \")  _augeas_commands+=(\"$c\")  done\n  _augeas_commands+=(\"save\")\n  _augeas_commands+=(\"print /augeas/events/saved\")  for c in \"${_augeas_commands[@]}\"; do\n    log.debug \"$c\"\n  done  _commands=$(IFS=$'\\n'; echo \"${_augeas_commands[*]}\")\n  _result=$(augtool $_lens_path -A 2 /tmp/augeas_error.$_pid   \"$_commands\" | grep -v Saved)  if [[ -s \"/tmp/augeas_error.$_pid\" ]]; then\n    _error=$( /tmp/augeas_error.$_pid)\n  fi  exec.mute rm /tmp/augeas_error.$_pid  if [[ -n $_error ]]; then\n    log.error \"Augeas error: $_error\"\n    return\n  fi  _return=\"/augeas/events/saved = \\\"$_file_path\\\"\"\n  if [[ $_result == $_return  ]]; then\n    waffles_resource_current_state=\"absent\"\n    return\n  elif [[ $_result =~ ^error ]]; then\n    log.error \"Error updating $_file.\"\n    return 1\n  fi\n}  augeas.generic.create\n}  log.warn \"Unable to perform deletions on Augeas resources.\"\n  return\n}  local _line_count=$(array.length _result)\n  if [ $_line_count $_operator $_comparison ]; then\n    return 0\n  else\n    return 1\n  fi\n}  local _match=\"false\"\n  local _part=\"\"\n  local _c=\"\"  for r in \"${_result[@]+\"${_result[@]}\"}\"; do\n    string.split \"$r\" \" = \"\n    if [[ $_function == \"path\" ]]; then\n      _part=\"${ split[0]}\"\n    else\n      _part=\"${ split[1]}\"\n    fi  if [[ $_operator == \"include\" ]] || [[ $_operator == \"not_include\" ]]; then\n  if [[ $_part =~ $_comparison ]]; then\n    _match=\"true\"\n    break\n  fi\nelif [[ $_operator == \"is\" ]] || [[ $_operator == \"is_not\" ]]; then\n  if [[ $_part == $_comparison ]]; then\n    _match=\"true\"\n    break\n  fi\nfi  done  if [[ $_operator == \"include\" ]] || [[ $_operator == \"is\" ]]; then\n    if [[ $_match == \"true\" ]]; then\n      return 0\n    else\n      return 1\n    fi\n  elif [[ $_operator == \"not_include\" ]] || [[ $_operator == \"is_not\" ]]; then\n    if [[ $_match == \"true\" ]]; then\n      return 1\n    else\n      return 0\n    fi\n  fi\n}  local _match=\"false\"  if [[ $(array.length _result) -gt 0 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.check/", 
            "text": "Name\n\n\nconsul.check\n\n\nDescription\n\n\nManages a consul.check.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the check Required.\n\n\nid: A unique ID for the check. Optional.\n\n\nservice_id: A service to tie the check to. Optional.\n\n\nnotes: Notes about the check. Optional.\n\n\ntoken: An ACL token. Optional.\n\n\ncheck: The script or http location for the check. Optional.\n\n\ntype: The type of check: script, http, or ttl. Required.\n\n\ninterval: The interval to run the script. Optional.\n\n\nttl: The TTL of the check. Optional.\n\n\nfile: The file to store the check in. Required. Defaults to /etc/consul/agent/conf.d/check-name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.check --name mysql \\\n             --check \n/usr/local/bin/check_mysql.sh\n \\\n             --type \nscript\n \\\n             --interval \n60s", 
            "title": "consul.check"
        }, 
        {
            "location": "/resources/consul.check/#name", 
            "text": "consul.check", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.check/#description", 
            "text": "Manages a consul.check.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.check/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the check Required.  id: A unique ID for the check. Optional.  service_id: A service to tie the check to. Optional.  notes: Notes about the check. Optional.  token: An ACL token. Optional.  check: The script or http location for the check. Optional.  type: The type of check: script, http, or ttl. Required.  interval: The interval to run the script. Optional.  ttl: The TTL of the check. Optional.  file: The file to store the check in. Required. Defaults to /etc/consul/agent/conf.d/check-name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.check/#example", 
            "text": "consul.check --name mysql \\\n             --check  /usr/local/bin/check_mysql.sh  \\\n             --type  script  \\\n             --interval  60s", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.service/", 
            "text": "Name\n\n\nconsul.service\n\n\nDescription\n\n\nManages a consul service.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the service. Required.\n\n\nid: A unique ID for the service. Optional.\n\n\ntag: Tags to describe the service. Optional. Multi-var.\n\n\naddress: The address of the service. Optional.\n\n\nport: The port that the service runs on. Optional.\n\n\ntoken: An ACL token. Optional.\n\n\ncheck: The script or location for the check. Optional. Multi-var.\n\n\ncheck_type: The type of check. Optional. Multi-var.\n\n\ncheck_interval: The interval to run the script. Optional. Multi-var.\n\n\ncheck_ttl: The TTL of the check. Optional. Multi-var.\n\n\nfile: The file to store the service in. Required. Defaults to /etc/consul/agent/conf.d/service-name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.service --name mysql \\\n               --port 3306 \\\n               --check_type \nscript\n \\\n               --check \n/usr/local/bin/check_mysql.sh\n \\\n               --check_interval \n60s", 
            "title": "consul.service"
        }, 
        {
            "location": "/resources/consul.service/#name", 
            "text": "consul.service", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.service/#description", 
            "text": "Manages a consul service.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.service/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the service. Required.  id: A unique ID for the service. Optional.  tag: Tags to describe the service. Optional. Multi-var.  address: The address of the service. Optional.  port: The port that the service runs on. Optional.  token: An ACL token. Optional.  check: The script or location for the check. Optional. Multi-var.  check_type: The type of check. Optional. Multi-var.  check_interval: The interval to run the script. Optional. Multi-var.  check_ttl: The TTL of the check. Optional. Multi-var.  file: The file to store the service in. Required. Defaults to /etc/consul/agent/conf.d/service-name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.service/#example", 
            "text": "consul.service --name mysql \\\n               --port 3306 \\\n               --check_type  script  \\\n               --check  /usr/local/bin/check_mysql.sh  \\\n               --check_interval  60s", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.template/", 
            "text": "Name\n\n\nconsul.template\n\n\nDescription\n\n\nManages a consul.template.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the template. Required.\n\n\nsource: The source of the template. Optional. Defaults to /etc/consul/template/ctmpl/name.ctmpl\n\n\ndestination: The destination of the rendered template. Required.\n\n\ncommand: An optional command to run after the template is rendered. Optional.\n\n\nfile: The file to store the template in. Required. Defaults to /etc/consul/template/conf.d/name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.template --name hosts \\\n                --destination /etc/hosts", 
            "title": "consul.template"
        }, 
        {
            "location": "/resources/consul.template/#name", 
            "text": "consul.template", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.template/#description", 
            "text": "Manages a consul.template.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.template/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the template. Required.  source: The source of the template. Optional. Defaults to /etc/consul/template/ctmpl/name.ctmpl  destination: The destination of the rendered template. Required.  command: An optional command to run after the template is rendered. Optional.  file: The file to store the template in. Required. Defaults to /etc/consul/template/conf.d/name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.template/#example", 
            "text": "consul.template --name hosts \\\n                --destination /etc/hosts", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.watch/", 
            "text": "Name\n\n\nconsul.watch\n\n\nDescription\n\n\nManages a consul.watch.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the watch. Required.\n\n\ntype: The type of watch: key, keyprefix, services, nodes, service, checks, event. Required.\n\n\nkey: A key to monitor when using type \"key\". Optional.\n\n\nprefix: A prefix to monitor when using type \"keyprefix\". Optional.\n\n\nservice: A service to monitor when using type \"service\" or \"checks\". Optional.\n\n\ntag: A service tag to monitor when using type \"service\". Optional.\n\n\npassingonly: Only return instances passing all health checks when using type \"service\". Optional.\n\n\ncheck_state: A state to filter on when using type \"checks\". Optional.\n\n\nevent_name: An event to filter on when using type \"event. Optional.\n\n\ndatacenter: Can be provided to override the agent's default datacenter. Optional.\n\n\ntoken: Can be provided to override the agent's default ACL token. Optional.\n\n\nhandler: The handler to invoke when the data view updates. Required.\n\n\nfile: The file to store the watch in. Required. Defaults to /etc/consul/agent/conf.d/watch-name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.watch --name nodes \\\n             --type nodes \\\n             --handler \n/usr/local/bin/build_hosts_file.sh", 
            "title": "consul.watch"
        }, 
        {
            "location": "/resources/consul.watch/#name", 
            "text": "consul.watch", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.watch/#description", 
            "text": "Manages a consul.watch.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.watch/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the watch. Required.  type: The type of watch: key, keyprefix, services, nodes, service, checks, event. Required.  key: A key to monitor when using type \"key\". Optional.  prefix: A prefix to monitor when using type \"keyprefix\". Optional.  service: A service to monitor when using type \"service\" or \"checks\". Optional.  tag: A service tag to monitor when using type \"service\". Optional.  passingonly: Only return instances passing all health checks when using type \"service\". Optional.  check_state: A state to filter on when using type \"checks\". Optional.  event_name: An event to filter on when using type \"event. Optional.  datacenter: Can be provided to override the agent's default datacenter. Optional.  token: Can be provided to override the agent's default ACL token. Optional.  handler: The handler to invoke when the data view updates. Required.  file: The file to store the watch in. Required. Defaults to /etc/consul/agent/conf.d/watch-name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.watch/#example", 
            "text": "consul.watch --name nodes \\\n             --type nodes \\\n             --handler  /usr/local/bin/build_hosts_file.sh", 
            "title": "Example"
        }, 
        {
            "location": "/resources/cron.entry/", 
            "text": "Name\n\n\ncron.entry\n\n\nDescription\n\n\nManages cron entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: A single-word name for the cron. Required.\n\n\nuser: The user to run the cron job as. Default: root.\n\n\ncmd: The command to run. Required.\n\n\nminute: The minute field of the cron. Default: *.\n\n\nhour: The hour field of the cron. Default: *.\n\n\ndom: The day of month field for the cron. Default: *.\n\n\nmonth: The month field of the cron. Default: *.\n\n\ndow: The day of week field of the cron. Default: *.\n\n\n\n\nExample\n\n\ncron.entry --name foobar --cmd /path/to/some/report --minute \n*/5\n\n\n\n\n\nTODO\n\n\nAdd support for prefix info such as PATH, MAILTO.", 
            "title": "cron.entry"
        }, 
        {
            "location": "/resources/cron.entry/#name", 
            "text": "cron.entry", 
            "title": "Name"
        }, 
        {
            "location": "/resources/cron.entry/#description", 
            "text": "Manages cron entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/cron.entry/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: A single-word name for the cron. Required.  user: The user to run the cron job as. Default: root.  cmd: The command to run. Required.  minute: The minute field of the cron. Default: *.  hour: The hour field of the cron. Default: *.  dom: The day of month field for the cron. Default: *.  month: The month field of the cron. Default: *.  dow: The day of week field of the cron. Default: *.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/cron.entry/#example", 
            "text": "cron.entry --name foobar --cmd /path/to/some/report --minute  */5", 
            "title": "Example"
        }, 
        {
            "location": "/resources/cron.entry/#todo", 
            "text": "Add support for prefix info such as PATH, MAILTO.", 
            "title": "TODO"
        }, 
        {
            "location": "/resources/dnf.copr/", 
            "text": "Name\n\n\ndnf.copr\n\n\nDescription\n\n\nManages copr repositories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The user name of the copr repo. rhscl in rhscl/perl516. Required.\n\n\nproject: The project name of the copr repo. perl516 in rhscl/perl516. Required.\n\n\n\n\nExample\n\n\ndnf.copr --name rhscl --project perl516", 
            "title": "dnf.copr"
        }, 
        {
            "location": "/resources/dnf.copr/#name", 
            "text": "dnf.copr", 
            "title": "Name"
        }, 
        {
            "location": "/resources/dnf.copr/#description", 
            "text": "Manages copr repositories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/dnf.copr/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The user name of the copr repo. rhscl in rhscl/perl516. Required.  project: The project name of the copr repo. perl516 in rhscl/perl516. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/dnf.copr/#example", 
            "text": "dnf.copr --name rhscl --project perl516", 
            "title": "Example"
        }, 
        {
            "location": "/resources/dnf.pkg/", 
            "text": "Name\n\n\ndnf.pkg\n\n\nDescription\n\n\nManage packages via dnf.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npackage: The name of the package, or the path to the rpm-file. Required.\n\n\nversion: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.\n\n\n\n\nExample\n\n\ndnf.pkg --package tmux --version latest\ndnf.pkg --package http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm", 
            "title": "dnf.pkg"
        }, 
        {
            "location": "/resources/dnf.pkg/#name", 
            "text": "dnf.pkg", 
            "title": "Name"
        }, 
        {
            "location": "/resources/dnf.pkg/#description", 
            "text": "Manage packages via dnf.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/dnf.pkg/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  package: The name of the package, or the path to the rpm-file. Required.  version: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/dnf.pkg/#example", 
            "text": "dnf.pkg --package tmux --version latest\ndnf.pkg --package http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm", 
            "title": "Example"
        }, 
        {
            "location": "/resources/dnf.repo/", 
            "text": "Name\n\n\ndnf.repo\n\n\nDescription\n\n\nManages dnf/yum repositories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nfile: name of the file in /etc/yum.repos.d/. Required. The file \nmust\n exist already.\n\n\nname: name of the repo. Required.\n\n\ndescription: A short description of the repo. Optional.\n\n\nbaseurl: URL location of the repo. Optional.\n\n\nskip: Skip the repo if unavailable. Optional. Default 1.\n\n\nenabled: Enable this repository. Optional. Default 1.\n\n\ngpgcheck: Check RPMs for this repo. Optional. Default 0.\n\n\ngpgkey: Location of the key to check. Optional. Default \"\".\n\n\n\n\nExample\n\n\ndnf.repo --file fedora-negativo17.repo --name negativo17 --description \\\n  \nNegativo 17's repo\n --baseurl 'http://negativo17.org/repos/flash-plugin/fedora-$releasever/$basearch/'", 
            "title": "dnf.repo"
        }, 
        {
            "location": "/resources/dnf.repo/#name", 
            "text": "dnf.repo", 
            "title": "Name"
        }, 
        {
            "location": "/resources/dnf.repo/#description", 
            "text": "Manages dnf/yum repositories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/dnf.repo/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  file: name of the file in /etc/yum.repos.d/. Required. The file  must  exist already.  name: name of the repo. Required.  description: A short description of the repo. Optional.  baseurl: URL location of the repo. Optional.  skip: Skip the repo if unavailable. Optional. Default 1.  enabled: Enable this repository. Optional. Default 1.  gpgcheck: Check RPMs for this repo. Optional. Default 0.  gpgkey: Location of the key to check. Optional. Default \"\".", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/dnf.repo/#example", 
            "text": "dnf.repo --file fedora-negativo17.repo --name negativo17 --description \\\n   Negativo 17's repo  --baseurl 'http://negativo17.org/repos/flash-plugin/fedora-$releasever/$basearch/'", 
            "title": "Example"
        }, 
        {
            "location": "/resources/dpkg.debconf/", 
            "text": "Name\n\n\ndpkg.debconf\n\n\nDescription\n\n\nManages debconf entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npackage: The package to configure. Required.\n\n\nquestion: The debconf question. Required.\n\n\nvtype: The vtype of the debconf setting. Required.\n\n\nvalue: The answer/setting. Required.\n\n\n\n\nExample\n\n\ndpkg.debconf --package mysql-server --question mysql-server/root_password\n             --vtype password --value mypassword", 
            "title": "dpkg.debconf"
        }, 
        {
            "location": "/resources/dpkg.debconf/#name", 
            "text": "dpkg.debconf", 
            "title": "Name"
        }, 
        {
            "location": "/resources/dpkg.debconf/#description", 
            "text": "Manages debconf entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/dpkg.debconf/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  package: The package to configure. Required.  question: The debconf question. Required.  vtype: The vtype of the debconf setting. Required.  value: The answer/setting. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/dpkg.debconf/#example", 
            "text": "dpkg.debconf --package mysql-server --question mysql-server/root_password\n             --vtype password --value mypassword", 
            "title": "Example"
        }, 
        {
            "location": "/resources/file.ini/", 
            "text": "Name\n\n\nfile.ini\n\n\nDescription\n\n\nManages ini files/entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nfile: The ini file. Required. This file \nmust\n exist already.\n\n\nsection: The ini file section. Use \"\nnone\n\" to not use a section. Required.\n\n\noption: The ini file setting/option. Required.\n\n\nvalue: The value of the option. Use \"\nnone\n\" to not set a value. Required.\n\n\n\n\nExample\n\n\nfile.ini --file /etc/nova/nova.conf --section DEFAULT --option debug --value True", 
            "title": "file.ini"
        }, 
        {
            "location": "/resources/file.ini/#name", 
            "text": "file.ini", 
            "title": "Name"
        }, 
        {
            "location": "/resources/file.ini/#description", 
            "text": "Manages ini files/entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/file.ini/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  file: The ini file. Required. This file  must  exist already.  section: The ini file section. Use \" none \" to not use a section. Required.  option: The ini file setting/option. Required.  value: The value of the option. Use \" none \" to not set a value. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/file.ini/#example", 
            "text": "file.ini --file /etc/nova/nova.conf --section DEFAULT --option debug --value True", 
            "title": "Example"
        }, 
        {
            "location": "/resources/file.line/", 
            "text": "Name\n\n\nfile.line\n\n\nDescription\n\n\nManages single lines in a file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nfile: The file that the line belongs to. Required.\n\n\nline: The line to manage. Required.\n\n\nmatch: A regex to match to. Optional.\n\n\n\n\nExample\n\n\nfile.line --file /etc/memcached.conf \\\n          --line \n-l 0.0.0.0\n --match \n^-l", 
            "title": "file.line"
        }, 
        {
            "location": "/resources/file.line/#name", 
            "text": "file.line", 
            "title": "Name"
        }, 
        {
            "location": "/resources/file.line/#description", 
            "text": "Manages single lines in a file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/file.line/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  file: The file that the line belongs to. Required.  line: The line to manage. Required.  match: A regex to match to. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/file.line/#example", 
            "text": "file.line --file /etc/memcached.conf \\\n          --line  -l 0.0.0.0  --match  ^-l", 
            "title": "Example"
        }, 
        {
            "location": "/resources/git.repo/", 
            "text": "Name\n\n\ngit.repo\n\n\nDescription\n\n\nManage a git repository\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name (path) of the git repo destination. Required.\n\n\nsource: The URI of the source git repo. Required.\n\n\nbranch: The branch to checkout. Optional. Default: master.\n\n\ntag: The tag to checkout. Optional.\n\n\ncommit: the commit to checkout. Optional.\n\n\nowner: The owner of the repo. Default: root.\n\n\ngroup: The group owner of the repo. Default: root.\n\n\n\n\nExample\n\n\ngit.repo --state latest --name /root/.dotfiles --source https://github.com/jtopjian/dotfiles\n\n\n\n\nNotes\n\n\nIf state is set to \"latest\", Waffles will do a \ngit pull\n, if it's able to.\n\n\nThe order of checkout preferences is:\n\n\n\n\ncommit\n\n\ntag\n\n\nbranch", 
            "title": "git.repo"
        }, 
        {
            "location": "/resources/git.repo/#name", 
            "text": "git.repo", 
            "title": "Name"
        }, 
        {
            "location": "/resources/git.repo/#description", 
            "text": "Manage a git repository", 
            "title": "Description"
        }, 
        {
            "location": "/resources/git.repo/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name (path) of the git repo destination. Required.  source: The URI of the source git repo. Required.  branch: The branch to checkout. Optional. Default: master.  tag: The tag to checkout. Optional.  commit: the commit to checkout. Optional.  owner: The owner of the repo. Default: root.  group: The group owner of the repo. Default: root.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/git.repo/#example", 
            "text": "git.repo --state latest --name /root/.dotfiles --source https://github.com/jtopjian/dotfiles", 
            "title": "Example"
        }, 
        {
            "location": "/resources/git.repo/#notes", 
            "text": "If state is set to \"latest\", Waffles will do a  git pull , if it's able to.  The order of checkout preferences is:   commit  tag  branch", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/ip6tables.rule/", 
            "text": "Name\n\n\nip6tables.rule\n\n\nDescription\n\n\nManages ip6tables rules\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the rule. Required.\n\n\npriority: An arbitrary number to give the rule priority. Required. Default 100.\n\n\ntable: The table to add the rule to.. Required. Default: filter.\n\n\nchain: The chain to add the rule to. Required. Default: INPUT.\n\n\nrule: The rule. Required.\n\n\naction: The action to take on the rule. Required. Default: ACCEPT.\n\n\n\n\nExample\n\n\nip6tables.rule --priority 100 --name \nallow all from 192.168.1.0/24\n --rule \n-m tcp -s 192.168.1.0/24\n --action ACCEPT", 
            "title": "ip6tables.rule"
        }, 
        {
            "location": "/resources/ip6tables.rule/#name", 
            "text": "ip6tables.rule", 
            "title": "Name"
        }, 
        {
            "location": "/resources/ip6tables.rule/#description", 
            "text": "Manages ip6tables rules", 
            "title": "Description"
        }, 
        {
            "location": "/resources/ip6tables.rule/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the rule. Required.  priority: An arbitrary number to give the rule priority. Required. Default 100.  table: The table to add the rule to.. Required. Default: filter.  chain: The chain to add the rule to. Required. Default: INPUT.  rule: The rule. Required.  action: The action to take on the rule. Required. Default: ACCEPT.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/ip6tables.rule/#example", 
            "text": "ip6tables.rule --priority 100 --name  allow all from 192.168.1.0/24  --rule  -m tcp -s 192.168.1.0/24  --action ACCEPT", 
            "title": "Example"
        }, 
        {
            "location": "/resources/iptables.rule/", 
            "text": "Name\n\n\niptables.rule\n\n\nDescription\n\n\nManages iptables rules\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the rule. Required.\n\n\npriority: An arbitrary number to give the rule priority. Required. Default 100.\n\n\ntable: The table to add the rule to.. Required. Default: filter.\n\n\nchain: The chain to add the rule to. Required. Default: INPUT.\n\n\nrule: The rule. Required.\n\n\naction: The action to take on the rule. Required. Default: ACCEPT.\n\n\n\n\nExample\n\n\niptables.rule --priority 100 --name \nallow all from 192.168.1.0/24\n --rule \n-m tcp -s 192.168.1.0/24\n --action ACCEPT", 
            "title": "iptables.rule"
        }, 
        {
            "location": "/resources/iptables.rule/#name", 
            "text": "iptables.rule", 
            "title": "Name"
        }, 
        {
            "location": "/resources/iptables.rule/#description", 
            "text": "Manages iptables rules", 
            "title": "Description"
        }, 
        {
            "location": "/resources/iptables.rule/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the rule. Required.  priority: An arbitrary number to give the rule priority. Required. Default 100.  table: The table to add the rule to.. Required. Default: filter.  chain: The chain to add the rule to. Required. Default: INPUT.  rule: The rule. Required.  action: The action to take on the rule. Required. Default: ACCEPT.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/iptables.rule/#example", 
            "text": "iptables.rule --priority 100 --name  allow all from 192.168.1.0/24  --rule  -m tcp -s 192.168.1.0/24  --action ACCEPT", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.database/", 
            "text": "Name\n\n\nmysql.database\n\n\nDescription\n\n\nManages MySQL databases\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the database. Required.\n\n\ncharset: The character set of the database.\n\n\ncollate: The collation of the database.\n\n\n\n\nExample\n\n\nmysql.database --name mydb", 
            "title": "mysql.database"
        }, 
        {
            "location": "/resources/mysql.database/#name", 
            "text": "mysql.database", 
            "title": "Name"
        }, 
        {
            "location": "/resources/mysql.database/#description", 
            "text": "Manages MySQL databases", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.database/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the database. Required.  charset: The character set of the database.  collate: The collation of the database.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.database/#example", 
            "text": "mysql.database --name mydb", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.grant/", 
            "text": "Name\n\n\nmysql.grant\n\n\nDescription\n\n\nManages MySQL grants\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user to receive the grant. Required. unique.\n\n\nhost: The host of the user. Required. unique.\n\n\ndatabase: The database to apply the grant on. Required.\n\n\nprivileges: The privileges to grant. Required.\n\n\n\n\nExample\n\n\nmysql.grant --user nova --host localhost --database nova --privileges \nSELECT, UPDATE, DELETE", 
            "title": "mysql.grant"
        }, 
        {
            "location": "/resources/mysql.grant/#name", 
            "text": "mysql.grant", 
            "title": "Name"
        }, 
        {
            "location": "/resources/mysql.grant/#description", 
            "text": "Manages MySQL grants", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.grant/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user to receive the grant. Required. unique.  host: The host of the user. Required. unique.  database: The database to apply the grant on. Required.  privileges: The privileges to grant. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.grant/#example", 
            "text": "mysql.grant --user nova --host localhost --database nova --privileges  SELECT, UPDATE, DELETE", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.user/", 
            "text": "Name\n\n\nmysql.user\n\n\nDescription\n\n\nManages MySQL users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username of the mysql user. unique.\n\n\nhost: The host of the mysql user. Required. unique.\n\n\npassword: The password of the mysql user.\n\n\n\n\nUnintuitively, user and password are optional because MySQL allows blank usernames and blank passwords.\n\n\nExample\n\n\nmysql.user --user root --password password", 
            "title": "mysql.user"
        }, 
        {
            "location": "/resources/mysql.user/#name", 
            "text": "mysql.user", 
            "title": "Name"
        }, 
        {
            "location": "/resources/mysql.user/#description", 
            "text": "Manages MySQL users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username of the mysql user. unique.  host: The host of the mysql user. Required. unique.  password: The password of the mysql user.   Unintuitively, user and password are optional because MySQL allows blank usernames and blank passwords.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.user/#example", 
            "text": "mysql.user --user root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.directory/", 
            "text": "Name\n\n\nos.directory\n\n\nDescription\n\n\nManages directories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nowner: The owner of the directory. Default: root.\n\n\ngroup: The group of the directory. Default: root.\n\n\nmode: The perms/mode of the directory. Default: 0750.\n\n\nname: The destination directory. Required.\n\n\nsource: Optional source directory to copy.\n\n\nrecurse: Whether to apply all settings recursively. Optional.\n\n\nparent: Whether to make the parent directories. Optional.\n\n\n\n\nExample\n\n\nos.directory --source \n$profile_files/mydir\n --name /var/lib/mydir", 
            "title": "os.directory"
        }, 
        {
            "location": "/resources/os.directory/#name", 
            "text": "os.directory", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.directory/#description", 
            "text": "Manages directories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.directory/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  owner: The owner of the directory. Default: root.  group: The group of the directory. Default: root.  mode: The perms/mode of the directory. Default: 0750.  name: The destination directory. Required.  source: Optional source directory to copy.  recurse: Whether to apply all settings recursively. Optional.  parent: Whether to make the parent directories. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.directory/#example", 
            "text": "os.directory --source  $profile_files/mydir  --name /var/lib/mydir", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.file/", 
            "text": "Name\n\n\nos.file\n\n\nDescription\n\n\nManages files\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nowner: The owner of the file Default: root.\n\n\ngroup: The group of the file Default: root.\n\n\nmode: The perms/mode of the file Default: 0640.\n\n\nname: The destination file. Required.\n\n\ncontent: STDIN content for the file. Optional.\n\n\nsource: Source file to copy. Optional.\n\n\n\n\nExample\n\n\nos.file --name /etc/foobar --content \nHello, World!", 
            "title": "os.file"
        }, 
        {
            "location": "/resources/os.file/#name", 
            "text": "os.file", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.file/#description", 
            "text": "Manages files", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.file/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  owner: The owner of the file Default: root.  group: The group of the file Default: root.  mode: The perms/mode of the file Default: 0640.  name: The destination file. Required.  content: STDIN content for the file. Optional.  source: Source file to copy. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.file/#example", 
            "text": "os.file --name /etc/foobar --content  Hello, World!", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.groupadd/", 
            "text": "Name\n\n\nos.groupadd\n\n\nDescription\n\n\nManages groups\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ngroup: The group. Required.\n\n\ngid: The gid of the group. Optional.\n\n\n\n\nExample\n\n\nos.groupadd --group jdoe --gid 999", 
            "title": "os.groupadd"
        }, 
        {
            "location": "/resources/os.groupadd/#name", 
            "text": "os.groupadd", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.groupadd/#description", 
            "text": "Manages groups", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.groupadd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  group: The group. Required.  gid: The gid of the group. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.groupadd/#example", 
            "text": "os.groupadd --group jdoe --gid 999", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.symlink/", 
            "text": "Name\n\n\nos.symlink\n\n\nDescription\n\n\nManages symlinks\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the link. Required.\n\n\ntarget: The target of the link. Optional.\n\n\noverwrite: Overwrite the link if it already exists. Optional. Defaults to false.\n\n\n\n\nExample\n\n\nos.symlink --name /usr/local/man --target /usr/share/man", 
            "title": "os.symlink"
        }, 
        {
            "location": "/resources/os.symlink/#name", 
            "text": "os.symlink", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.symlink/#description", 
            "text": "Manages symlinks", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.symlink/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the link. Required.  target: The target of the link. Optional.  overwrite: Overwrite the link if it already exists. Optional. Defaults to false.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.symlink/#example", 
            "text": "os.symlink --name /usr/local/man --target /usr/share/man", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.useradd/", 
            "text": "Name\n\n\nos.useradd\n\n\nDescription\n\n\nManages users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user Required.\n\n\nuid: The uid of the user Optional.\n\n\ngid: The gid of the user Optional.\n\n\ncreatehome: Whether to create the homedir. Default: false.\n\n\nsudo: Whether to give sudo ability: Default: false.\n\n\nshell: The shell of the user. Default /usr/sbin/nologin.\n\n\ncomment: The comment field. Optional.\n\n\nhomedir: The homedir of the user. Optional.\n\n\npasswd: The password hash. Optional.\n\n\ngroups: Supplemental groups of the user. Optional.\n\n\nsystem: Whether the user is a system user or not. Default: false\n\n\n\n\nExample\n\n\nos.useradd --user jdoe --uid 999 --createhome true --homedir /home/jdoe \\\n           --shell /bin/bash --comment \nJohn Doe\n\n\n\n\n\nNotes\n\n\nThe \n--system true\n flag is only useful during a create. If the user already\nexists and you choose to change it into a system using with the \n--system\n\nflag, it's best to delete the user and recreate it.", 
            "title": "os.useradd"
        }, 
        {
            "location": "/resources/os.useradd/#name", 
            "text": "os.useradd", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.useradd/#description", 
            "text": "Manages users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.useradd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user Required.  uid: The uid of the user Optional.  gid: The gid of the user Optional.  createhome: Whether to create the homedir. Default: false.  sudo: Whether to give sudo ability: Default: false.  shell: The shell of the user. Default /usr/sbin/nologin.  comment: The comment field. Optional.  homedir: The homedir of the user. Optional.  passwd: The password hash. Optional.  groups: Supplemental groups of the user. Optional.  system: Whether the user is a system user or not. Default: false", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.useradd/#example", 
            "text": "os.useradd --user jdoe --uid 999 --createhome true --homedir /home/jdoe \\\n           --shell /bin/bash --comment  John Doe", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.useradd/#notes", 
            "text": "The  --system true  flag is only useful during a create. If the user already\nexists and you choose to change it into a system using with the  --system \nflag, it's best to delete the user and recreate it.", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/python.pip/", 
            "text": "Name\n\n\npython.pip\n\n\nDescription\n\n\nManage a pip python package\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the pip package. Required.\n\n\nversion: The version of the pip package. Optional.\n\n\nvirtualenv: The virtual environment to put the package in. Required. Default: system.\n\n\nurl: A URL to install the package from. Optional.\n\n\nowner: The owner of the virtualenv. Required. Default: root.\n\n\ngroup: The group of the virtualenv. Required. Default: root.\n\n\nindex: Base URL of the python package index. Optional.\n\n\neditable: If the package is installed as an editable resource. Required. Default: false.\n\n\nenvironment: Additional environment variables. Optional.\n\n\ninstall_args: Additional arguments to use when installing. Optional.\n\n\nuninstall-args: Additional arguments to use when uninstalling. Optional.\n\n\n\n\nExample\n\n\npython.pip --name minilanguage\npython.pip --name minilanguage --version 0.3.0\npython.pip --name minilanguage --version latest\n\n\n\n\nNotes\n\n\nThis resource is heavily based on puppet-python", 
            "title": "python.pip"
        }, 
        {
            "location": "/resources/python.pip/#name", 
            "text": "python.pip", 
            "title": "Name"
        }, 
        {
            "location": "/resources/python.pip/#description", 
            "text": "Manage a pip python package", 
            "title": "Description"
        }, 
        {
            "location": "/resources/python.pip/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the pip package. Required.  version: The version of the pip package. Optional.  virtualenv: The virtual environment to put the package in. Required. Default: system.  url: A URL to install the package from. Optional.  owner: The owner of the virtualenv. Required. Default: root.  group: The group of the virtualenv. Required. Default: root.  index: Base URL of the python package index. Optional.  editable: If the package is installed as an editable resource. Required. Default: false.  environment: Additional environment variables. Optional.  install_args: Additional arguments to use when installing. Optional.  uninstall-args: Additional arguments to use when uninstalling. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/python.pip/#example", 
            "text": "python.pip --name minilanguage\npython.pip --name minilanguage --version 0.3.0\npython.pip --name minilanguage --version latest", 
            "title": "Example"
        }, 
        {
            "location": "/resources/python.pip/#notes", 
            "text": "This resource is heavily based on puppet-python", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/python.virtualenv/", 
            "text": "Name\n\n\npython.virtualenv\n\n\nDescription\n\n\nManage a python virtualenv\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the virtualenv package. Required.\n\n\nvenv_dir: The path / parent directory to the virtual environment. Required. Default: /usr/local\"\n\n\nrequirements: The path to a requirements.txt file. Optional.\n\n\nsystempkgs: Copy system site-packages into the virtualenv. Required. Default: false.\n\n\ndistribute: Distribute method. Required. Default: distribute\n\n\nindex: An alternative pypi index file. Optional.\n\n\nowner: The owner of the virtualenv. Required. Default: root.\n\n\ngroup: The group of the virtualenv. Required. Default: root.\n\n\nmode: The directory mode of the venv. Required. Default: 755.\n\n\nenvironment: Additional environment variables. Optional.\n\n\npip_args: Extra pip args. Optional.\n\n\n\n\nExample\n\n\npython.virtualenv --name foo\n\n\n\n\nNotes\n\n\nThis resource is heavily based on puppet-python", 
            "title": "python.virtualenv"
        }, 
        {
            "location": "/resources/python.virtualenv/#name", 
            "text": "python.virtualenv", 
            "title": "Name"
        }, 
        {
            "location": "/resources/python.virtualenv/#description", 
            "text": "Manage a python virtualenv", 
            "title": "Description"
        }, 
        {
            "location": "/resources/python.virtualenv/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the virtualenv package. Required.  venv_dir: The path / parent directory to the virtual environment. Required. Default: /usr/local\"  requirements: The path to a requirements.txt file. Optional.  systempkgs: Copy system site-packages into the virtualenv. Required. Default: false.  distribute: Distribute method. Required. Default: distribute  index: An alternative pypi index file. Optional.  owner: The owner of the virtualenv. Required. Default: root.  group: The group of the virtualenv. Required. Default: root.  mode: The directory mode of the venv. Required. Default: 755.  environment: Additional environment variables. Optional.  pip_args: Extra pip args. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/python.virtualenv/#example", 
            "text": "python.virtualenv --name foo", 
            "title": "Example"
        }, 
        {
            "location": "/resources/python.virtualenv/#notes", 
            "text": "This resource is heavily based on puppet-python", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/rabbitmq.policy/", 
            "text": "Name\n\n\nrabbitmq.policy\n\n\nDescription\n\n\nManages RabbitMQ policies\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the policy. Required.\n\n\nvhost: The vhost to apply the policy to. Default: /.\n\n\nqueues: The queues to apply the policy to. Default: all.\n\n\npolicy: The policy. Required.\n\n\n\n\nExample\n\n\nrabbitmq.policy --name openstack-ha --vhost openstack --policy '{\nha-mode\n:\nall\n}'", 
            "title": "rabbitmq.policy"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#name", 
            "text": "rabbitmq.policy", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#description", 
            "text": "Manages RabbitMQ policies", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the policy. Required.  vhost: The vhost to apply the policy to. Default: /.  queues: The queues to apply the policy to. Default: all.  policy: The policy. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#example", 
            "text": "rabbitmq.policy --name openstack-ha --vhost openstack --policy '{ ha-mode : all }'", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/", 
            "text": "Name\n\n\nrabbitmq.user_permissions\n\n\nDescription\n\n\nManages RabbitMQ user permissions\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username@vhost of the rabbitmq user. Required.\n\n\nconf: The conf portion of the set_permissions command. Default: '.*'\n\n\nwrite: The write portion of the set_permissions command. Default: '.*'\n\n\nread: The read portion of the set_permissions command. Default: '.*'\n\n\n\n\nExample\n\n\nrabbitmq.user_permission --user_permission root --password password", 
            "title": "rabbitmq.user_permissions"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#name", 
            "text": "rabbitmq.user_permissions", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#description", 
            "text": "Manages RabbitMQ user permissions", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username@vhost of the rabbitmq user. Required.  conf: The conf portion of the set_permissions command. Default: '.*'  write: The write portion of the set_permissions command. Default: '.*'  read: The read portion of the set_permissions command. Default: '.*'", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#example", 
            "text": "rabbitmq.user_permission --user_permission root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.user/", 
            "text": "Name\n\n\nrabbitmq.user\n\n\nDescription\n\n\nManages RabbitMQ users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username of the rabbitmq user. Required.\n\n\npassword: The password of the rabbitmq user.\n\n\nadmin: Make the user an admin. Default: false.\n\n\n\n\nExample\n\n\nrabbitmq.user --user root --password password", 
            "title": "rabbitmq.user"
        }, 
        {
            "location": "/resources/rabbitmq.user/#name", 
            "text": "rabbitmq.user", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.user/#description", 
            "text": "Manages RabbitMQ users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username of the rabbitmq user. Required.  password: The password of the rabbitmq user.  admin: Make the user an admin. Default: false.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.user/#example", 
            "text": "rabbitmq.user --user root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/", 
            "text": "Name\n\n\nrabbitmq.vhost\n\n\nDescription\n\n\nManages RabbitMQ vhosts\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvhost: The vhostname of the rabbitmq vhost. Required.\n\n\n\n\nExample\n\n\nrabbitmq.vhost --vhost openstack", 
            "title": "rabbitmq.vhost"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#name", 
            "text": "rabbitmq.vhost", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#description", 
            "text": "Manages RabbitMQ vhosts", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  vhost: The vhostname of the rabbitmq vhost. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#example", 
            "text": "rabbitmq.vhost --vhost openstack", 
            "title": "Example"
        }, 
        {
            "location": "/resources/ruby.gem/", 
            "text": "Name\n\n\nruby.gem\n\n\nDescription\n\n\nManage a ruby gem.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the gem. Required.\n\n\nversion: The version of the gem. Optional.\n\n\nurl: A URL to install the gem from. Optional.\n\n\n\n\nExample\n\n\nruby.gem --name test-kitchen", 
            "title": "ruby.gem"
        }, 
        {
            "location": "/resources/ruby.gem/#name", 
            "text": "ruby.gem", 
            "title": "Name"
        }, 
        {
            "location": "/resources/ruby.gem/#description", 
            "text": "Manage a ruby gem.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/ruby.gem/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the gem. Required.  version: The version of the gem. Optional.  url: A URL to install the gem from. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/ruby.gem/#example", 
            "text": "ruby.gem --name test-kitchen", 
            "title": "Example"
        }, 
        {
            "location": "/resources/service.sysv/", 
            "text": "Name\n\n\nservice.sysv\n\n\nDescription\n\n\nManages sysv-init services\n\n\nParameters\n\n\n\n\nstate: The state of the service. Required. Default: running.\n\n\nname: The name of the service. Required.\n\n\n\n\nExample\n\n\nservice.sysv --name memcached", 
            "title": "service.sysv"
        }, 
        {
            "location": "/resources/service.sysv/#name", 
            "text": "service.sysv", 
            "title": "Name"
        }, 
        {
            "location": "/resources/service.sysv/#description", 
            "text": "Manages sysv-init services", 
            "title": "Description"
        }, 
        {
            "location": "/resources/service.sysv/#parameters", 
            "text": "state: The state of the service. Required. Default: running.  name: The name of the service. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/service.sysv/#example", 
            "text": "service.sysv --name memcached", 
            "title": "Example"
        }, 
        {
            "location": "/resources/service.upstart/", 
            "text": "Name\n\n\nservice.upstart\n\n\nDescription\n\n\nManages upstart services\n\n\nParameters\n\n\n\n\nstate: The state of the service. Required. Default: running.\n\n\nname: The name of the service. Required.\n\n\n\n\nExample\n\n\nservice.upstart --name memcached", 
            "title": "service.upstart"
        }, 
        {
            "location": "/resources/service.upstart/#name", 
            "text": "service.upstart", 
            "title": "Name"
        }, 
        {
            "location": "/resources/service.upstart/#description", 
            "text": "Manages upstart services", 
            "title": "Description"
        }, 
        {
            "location": "/resources/service.upstart/#parameters", 
            "text": "state: The state of the service. Required. Default: running.  name: The name of the service. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/service.upstart/#example", 
            "text": "service.upstart --name memcached", 
            "title": "Example"
        }, 
        {
            "location": "/resources/sudoers.cmd/", 
            "text": "Name\n\n\nsudoers.cmd\n\n\nDescription\n\n\nProvides an easy way to give a user sudo access to a single command\ndefined in a sudoers.d file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user of the sudo privilege. Required.\n\n\ncommand: The command of the sudo privilege. Required.\n\n\npassword: Whether to prompt for a password. Required. Default: false.\n\n\n\n\nExample\n\n\nsudoers.cmd --user consul --command /usr/local/bin/consul_build_hosts_file.sh", 
            "title": "sudoers.cmd"
        }, 
        {
            "location": "/resources/sudoers.cmd/#name", 
            "text": "sudoers.cmd", 
            "title": "Name"
        }, 
        {
            "location": "/resources/sudoers.cmd/#description", 
            "text": "Provides an easy way to give a user sudo access to a single command\ndefined in a sudoers.d file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/sudoers.cmd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user of the sudo privilege. Required.  command: The command of the sudo privilege. Required.  password: Whether to prompt for a password. Required. Default: false.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/sudoers.cmd/#example", 
            "text": "sudoers.cmd --user consul --command /usr/local/bin/consul_build_hosts_file.sh", 
            "title": "Example"
        }
    ]
}