{
    "docs": [
        {
            "location": "/", 
            "text": "Waffles\n\n\nA collection of tools to help make deploying, provisioning, and maintaining systems easier.\n\n\nWaffles Shell Scripts\n\n\nThe core of the Waffles project is... \nWaffles\n: a suite of Bash scripts to manage server resources in an idempotent fashion. You can use Waffles to create server build scripts that can be executed multiple times and only making changes when needed.\n\n\nWaffles tries to be:\n\n\nEasy to Use\n\n\nTo get started with Waffles, simply \"source\" the \ninit.sh\n script:\n\n\n$ source /opt/waffles/init.sh\n$ apt.pkg --help\n\n\n\n\nSimple\n\n\nIf you're proficient in shell scripting and system administration, you should have no problem dissecting and understanding Waffles.\n\n\nHelpful\n\n\nWaffles helps make the tasks you're already doing easier; whether that's adding an \napt\n PPA, a line to an \nini\n file, or adding a Cron entry.\n\n\nResourceful\n\n\nWaffles doesn't try to reinvent the wheel. Waffles leans on core system tools like \nawk\n, \nsed\n, and plain 'ol Bash to accomplish its tasks. Some Waffles resources have dependencies, but only when it makes sense.\n\n\nHumble\n\n\nIf there's a better tool for the job, Waffles yields to it. Waffles isn't interested in creating servers -- use \nTerraform\n for that. Use \nConsul\n or \nJuju\n for service orchestration.\n\n\nUse Waffles for maintaining basic resources within a server.\n\n\nWafflescript\n\n\nWafflescript\n is a compiled binary of Waffles. Simply copy the \nwafflescript\n binary to any system and immediately take advantage of the various Waffles resources.", 
            "title": "Home"
        }, 
        {
            "location": "/#waffles", 
            "text": "A collection of tools to help make deploying, provisioning, and maintaining systems easier.", 
            "title": "Waffles"
        }, 
        {
            "location": "/#waffles-shell-scripts", 
            "text": "The core of the Waffles project is...  Waffles : a suite of Bash scripts to manage server resources in an idempotent fashion. You can use Waffles to create server build scripts that can be executed multiple times and only making changes when needed.  Waffles tries to be:", 
            "title": "Waffles Shell Scripts"
        }, 
        {
            "location": "/#easy-to-use", 
            "text": "To get started with Waffles, simply \"source\" the  init.sh  script:  $ source /opt/waffles/init.sh\n$ apt.pkg --help", 
            "title": "Easy to Use"
        }, 
        {
            "location": "/#simple", 
            "text": "If you're proficient in shell scripting and system administration, you should have no problem dissecting and understanding Waffles.", 
            "title": "Simple"
        }, 
        {
            "location": "/#helpful", 
            "text": "Waffles helps make the tasks you're already doing easier; whether that's adding an  apt  PPA, a line to an  ini  file, or adding a Cron entry.", 
            "title": "Helpful"
        }, 
        {
            "location": "/#resourceful", 
            "text": "Waffles doesn't try to reinvent the wheel. Waffles leans on core system tools like  awk ,  sed , and plain 'ol Bash to accomplish its tasks. Some Waffles resources have dependencies, but only when it makes sense.", 
            "title": "Resourceful"
        }, 
        {
            "location": "/#humble", 
            "text": "If there's a better tool for the job, Waffles yields to it. Waffles isn't interested in creating servers -- use  Terraform  for that. Use  Consul  or  Juju  for service orchestration.  Use Waffles for maintaining basic resources within a server.", 
            "title": "Humble"
        }, 
        {
            "location": "/#wafflescript", 
            "text": "Wafflescript  is a compiled binary of Waffles. Simply copy the  wafflescript  binary to any system and immediately take advantage of the various Waffles resources.", 
            "title": "Wafflescript"
        }, 
        {
            "location": "/guides/waffles/", 
            "text": "Install Waffles\n\n\nInstalling Waffles is quick and easy!\n\n\n1. Clone the repository to a directory of your choice and install:\n\n\n$ git clone https://github.com/jtopjian/waffles /opt/waffles\n\n\n\n\n2. Source the \ninit.sh\n file either on the command-line or in a script.\n\n\nCommand-line\n\n\n$ source /opt/waffles.sh\n$ apt.pkg --help\n\n\n\n\nScript\n\n\n#!/bin/bash\n\nsource /opt/waffles.sh\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2\n/dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line \n-m $memory\n --match \n^-m\n\n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Waffles"
        }, 
        {
            "location": "/guides/waffles/#install-waffles", 
            "text": "Installing Waffles is quick and easy!  1. Clone the repository to a directory of your choice and install:  $ git clone https://github.com/jtopjian/waffles /opt/waffles  2. Source the  init.sh  file either on the command-line or in a script.", 
            "title": "Install Waffles"
        }, 
        {
            "location": "/guides/waffles/#command-line", 
            "text": "$ source /opt/waffles.sh\n$ apt.pkg --help", 
            "title": "Command-line"
        }, 
        {
            "location": "/guides/waffles/#script", 
            "text": "#!/bin/bash\n\nsource /opt/waffles.sh\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2 /dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line  -m $memory  --match  ^-m \n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Script"
        }, 
        {
            "location": "/guides/wafflescript/", 
            "text": "Install wafflescript\n\n\nInstalling wafflescript is quick and easy!\n\n\n1. Check the \nRelease Page\n for the latest release.\n2. Download and Untar it:\n\n\n$ wget https://github.com/wffls/wafflescript/releases/download/X/wafflescript_X_linux_x86_64.tgz\n$ tar xzf wafflescript_X_linux_x86_64.tgz -C /usr/local/bin\n\n\n\n\n3. Use it as the \"shebang\" interpreter in a script:\n\n\n#!/usr/local/bin/wafflescript\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line \n-l 0.0.0.0\n --match \n^-l\n\n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2\n/dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line \n-m $memory\n --match \n^-m\n\n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "wafflescript"
        }, 
        {
            "location": "/guides/wafflescript/#install-wafflescript", 
            "text": "Installing wafflescript is quick and easy!  1. Check the  Release Page  for the latest release.\n2. Download and Untar it:  $ wget https://github.com/wffls/wafflescript/releases/download/X/wafflescript_X_linux_x86_64.tgz\n$ tar xzf wafflescript_X_linux_x86_64.tgz -C /usr/local/bin  3. Use it as the \"shebang\" interpreter in a script:  #!/usr/local/bin/wafflescript\n\n# Install memcached\napt.pkg --package memcached --version latest\n\n# Set the listen option\nfile.line --file /etc/memcached.conf --line  -l 0.0.0.0  --match  ^-l \n\n# Determine the amount of memory available and use half of that for memcached\nmemory_bytes=$(elements System.Memory.Total 2 /dev/null)\nmemory=$(( $memory_bytes / 1024 / 1024 / 2 ))\n\n# Set the memory available to memcached\nfile.line --file /etc/memcached.conf --line  -m $memory  --match  ^-m \n\n# Manage the memcached service\nservice.sysv --name memcached\n\n# If any changes happened above, restart memcached\nif [[ -n $waffles_total_changes ]]; then\n  exec.mute /etc/init.d/memcached restart\nfi", 
            "title": "Install wafflescript"
        }, 
        {
            "location": "/resources/apt.key/", 
            "text": "Name\n\n\napt.key\n\n\nDescription\n\n\nManages apt keys\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name. Required.\n\n\nkey: The key to import. Required if no remote_keyfile.\n\n\nkeyserver: The key server. Required if no remote_keyfile.\n\n\nremote_keyfile: A remote key to import. Required if no key or keyserver.\n\n\n\n\nExample\n\n\napt.key --name \nfoobar\n --key 1C4CBDCDCD2EFD2A", 
            "title": "apt.key"
        }, 
        {
            "location": "/resources/apt.key/#name", 
            "text": "apt.key", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.key/#description", 
            "text": "Manages apt keys", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.key/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name. Required.  key: The key to import. Required if no remote_keyfile.  keyserver: The key server. Required if no remote_keyfile.  remote_keyfile: A remote key to import. Required if no key or keyserver.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.key/#example", 
            "text": "apt.key --name  foobar  --key 1C4CBDCDCD2EFD2A", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apt.pkg/", 
            "text": "Name\n\n\napt.pkg\n\n\nDescription\n\n\nManage packages via apt.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npackage: The name of the package. Required.\n\n\nversion: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.\n\n\n\n\nExample\n\n\napt.pkg --package tmux --version latest", 
            "title": "apt.pkg"
        }, 
        {
            "location": "/resources/apt.pkg/#name", 
            "text": "apt.pkg", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.pkg/#description", 
            "text": "Manage packages via apt.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.pkg/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  package: The name of the package. Required.  version: The version of the package. Leave empty for first version found. Set to \"latest\" to always update.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.pkg/#example", 
            "text": "apt.pkg --package tmux --version latest", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apt.ppa/", 
            "text": "Name\n\n\napt.ppa\n\n\nDescription\n\n\nManages PPA repositories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nppa: The PPA. Required.\n\n\nrefresh: run apt-get update if the PPA was modified. Default: true.\n\n\n\n\nExample\n\n\napt.ppa --ppa ppa:chris-lea/redis-server", 
            "title": "apt.ppa"
        }, 
        {
            "location": "/resources/apt.ppa/#name", 
            "text": "apt.ppa", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.ppa/#description", 
            "text": "Manages PPA repositories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.ppa/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  ppa: The PPA. Required.  refresh: run apt-get update if the PPA was modified. Default: true.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.ppa/#example", 
            "text": "apt.ppa --ppa ppa:chris-lea/redis-server", 
            "title": "Example"
        }, 
        {
            "location": "/resources/apt.source/", 
            "text": "Name\n\n\napt.source\n\n\nDescription\n\n\nManage /etc/apt/sources.list.d entries.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the apt repo. Required.\n\n\nuri: The URI of the apt repo. Required.\n\n\ndistribution: The distribution of the apt repo. Required.\n\n\ncomponent: The component of the apt repo. Optional.\n\n\ninclude_src: Whether to include the source repo. Default: false.\n\n\nrefresh: run apt-get update if the source was modified. Default: true.\n\n\n\n\nExample\n\n\napt.source --name lxc --uri http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu \\\n                  --distribution trusty --component main", 
            "title": "apt.source"
        }, 
        {
            "location": "/resources/apt.source/#name", 
            "text": "apt.source", 
            "title": "Name"
        }, 
        {
            "location": "/resources/apt.source/#description", 
            "text": "Manage /etc/apt/sources.list.d entries.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/apt.source/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the apt repo. Required.  uri: The URI of the apt repo. Required.  distribution: The distribution of the apt repo. Required.  component: The component of the apt repo. Optional.  include_src: Whether to include the source repo. Default: false.  refresh: run apt-get update if the source was modified. Default: true.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/apt.source/#example", 
            "text": "apt.source --name lxc --uri http://ppa.launchpad.net/ubuntu-lxc/stable/ubuntu \\\n                  --distribution trusty --component main", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.check/", 
            "text": "Name\n\n\nconsul.check\n\n\nDescription\n\n\nManages a consul.check.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the check Required.\n\n\nid: A unique ID for the check. Optional.\n\n\nservice_id: A service to tie the check to. Optional.\n\n\nnotes: Notes about the check. Optional.\n\n\ntoken: An ACL token. Optional.\n\n\ncheck: The script or http location for the check. Optional.\n\n\ntype: The type of check: script, http, or ttl. Required.\n\n\ninterval: The interval to run the script. Optional.\n\n\nttl: The TTL of the check. Optional.\n\n\nfile: The file to store the check in. Required. Defaults to /etc/consul/agent/conf.d/check-name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.check --name mysql \\\n             --check \n/usr/local/bin/check_mysql.sh\n \\\n             --type \nscript\n \\\n             --interval \n60s", 
            "title": "consul.check"
        }, 
        {
            "location": "/resources/consul.check/#name", 
            "text": "consul.check", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.check/#description", 
            "text": "Manages a consul.check.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.check/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the check Required.  id: A unique ID for the check. Optional.  service_id: A service to tie the check to. Optional.  notes: Notes about the check. Optional.  token: An ACL token. Optional.  check: The script or http location for the check. Optional.  type: The type of check: script, http, or ttl. Required.  interval: The interval to run the script. Optional.  ttl: The TTL of the check. Optional.  file: The file to store the check in. Required. Defaults to /etc/consul/agent/conf.d/check-name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.check/#example", 
            "text": "consul.check --name mysql \\\n             --check  /usr/local/bin/check_mysql.sh  \\\n             --type  script  \\\n             --interval  60s", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.service/", 
            "text": "Name\n\n\nconsul.service\n\n\nDescription\n\n\nManages a consul service.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the service. Required.\n\n\nid: A unique ID for the service. Optional.\n\n\ntag: Tags to describe the service. Optional. Multi-var.\n\n\naddress: The address of the service. Optional.\n\n\nport: The port that the service runs on. Optional.\n\n\ntoken: An ACL token. Optional.\n\n\ncheck: The script or location for the check. Optional. Multi-var.\n\n\ncheck_type: The type of check. Optional. Multi-var.\n\n\ncheck_interval: The interval to run the script. Optional. Multi-var.\n\n\ncheck_ttl: The TTL of the check. Optional. Multi-var.\n\n\nfile: The file to store the service in. Required. Defaults to /etc/consul/agent/conf.d/service-name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.service --name mysql \\\n               --port 3306 \\\n               --check_type \nscript\n \\\n               --check \n/usr/local/bin/check_mysql.sh\n \\\n               --check_interval \n60s", 
            "title": "consul.service"
        }, 
        {
            "location": "/resources/consul.service/#name", 
            "text": "consul.service", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.service/#description", 
            "text": "Manages a consul service.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.service/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the service. Required.  id: A unique ID for the service. Optional.  tag: Tags to describe the service. Optional. Multi-var.  address: The address of the service. Optional.  port: The port that the service runs on. Optional.  token: An ACL token. Optional.  check: The script or location for the check. Optional. Multi-var.  check_type: The type of check. Optional. Multi-var.  check_interval: The interval to run the script. Optional. Multi-var.  check_ttl: The TTL of the check. Optional. Multi-var.  file: The file to store the service in. Required. Defaults to /etc/consul/agent/conf.d/service-name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.service/#example", 
            "text": "consul.service --name mysql \\\n               --port 3306 \\\n               --check_type  script  \\\n               --check  /usr/local/bin/check_mysql.sh  \\\n               --check_interval  60s", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.template/", 
            "text": "Name\n\n\nconsul.template\n\n\nDescription\n\n\nManages a consul.template.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the template. Required.\n\n\nsource: The source of the template. Optional. Defaults to /etc/consul/template/ctmpl/name.ctmpl\n\n\ndestination: The destination of the rendered template. Required.\n\n\ncommand: An optional command to run after the template is rendered. Optional.\n\n\nfile: The file to store the template in. Required. Defaults to /etc/consul/template/conf.d/name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.template --name hosts \\\n                --destination /etc/hosts", 
            "title": "consul.template"
        }, 
        {
            "location": "/resources/consul.template/#name", 
            "text": "consul.template", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.template/#description", 
            "text": "Manages a consul.template.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.template/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the template. Required.  source: The source of the template. Optional. Defaults to /etc/consul/template/ctmpl/name.ctmpl  destination: The destination of the rendered template. Required.  command: An optional command to run after the template is rendered. Optional.  file: The file to store the template in. Required. Defaults to /etc/consul/template/conf.d/name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.template/#example", 
            "text": "consul.template --name hosts \\\n                --destination /etc/hosts", 
            "title": "Example"
        }, 
        {
            "location": "/resources/consul.watch/", 
            "text": "Name\n\n\nconsul.watch\n\n\nDescription\n\n\nManages a consul.watch.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the watch. Required.\n\n\ntype: The type of watch: key, keyprefix, services, nodes, service, checks, event. Required.\n\n\nkey: A key to monitor when using type \"key\". Optional.\n\n\nprefix: A prefix to monitor when using type \"keyprefix\". Optional.\n\n\nservice: A service to monitor when using type \"service\" or \"checks\". Optional.\n\n\ntag: A service tag to monitor when using type \"service\". Optional.\n\n\npassingonly: Only return instances passing all health checks when using type \"service\". Optional.\n\n\ncheck_state: A state to filter on when using type \"checks\". Optional.\n\n\nevent_name: An event to filter on when using type \"event. Optional.\n\n\ndatacenter: Can be provided to override the agent's default datacenter. Optional.\n\n\ntoken: Can be provided to override the agent's default ACL token. Optional.\n\n\nhandler: The handler to invoke when the data view updates. Required.\n\n\nfile: The file to store the watch in. Required. Defaults to /etc/consul/agent/conf.d/watch-name.json\n\n\nfile_owner: The owner of the service file. Optional. Defaults to root.\n\n\nfile_group: The group of the service file. Optional. Defaults to root.\n\n\nfile_mode: The mode of the service file. Optional. Defaults to 0640\n\n\n\n\nExample\n\n\nconsul.watch --name nodes \\\n             --type nodes \\\n             --handler \n/usr/local/bin/build_hosts_file.sh", 
            "title": "consul.watch"
        }, 
        {
            "location": "/resources/consul.watch/#name", 
            "text": "consul.watch", 
            "title": "Name"
        }, 
        {
            "location": "/resources/consul.watch/#description", 
            "text": "Manages a consul.watch.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/consul.watch/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the watch. Required.  type: The type of watch: key, keyprefix, services, nodes, service, checks, event. Required.  key: A key to monitor when using type \"key\". Optional.  prefix: A prefix to monitor when using type \"keyprefix\". Optional.  service: A service to monitor when using type \"service\" or \"checks\". Optional.  tag: A service tag to monitor when using type \"service\". Optional.  passingonly: Only return instances passing all health checks when using type \"service\". Optional.  check_state: A state to filter on when using type \"checks\". Optional.  event_name: An event to filter on when using type \"event. Optional.  datacenter: Can be provided to override the agent's default datacenter. Optional.  token: Can be provided to override the agent's default ACL token. Optional.  handler: The handler to invoke when the data view updates. Required.  file: The file to store the watch in. Required. Defaults to /etc/consul/agent/conf.d/watch-name.json  file_owner: The owner of the service file. Optional. Defaults to root.  file_group: The group of the service file. Optional. Defaults to root.  file_mode: The mode of the service file. Optional. Defaults to 0640", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/consul.watch/#example", 
            "text": "consul.watch --name nodes \\\n             --type nodes \\\n             --handler  /usr/local/bin/build_hosts_file.sh", 
            "title": "Example"
        }, 
        {
            "location": "/resources/cron.entry/", 
            "text": "Name\n\n\ncron.entry\n\n\nDescription\n\n\nManages cron entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: A single-word name for the cron. Required.\n\n\nuser: The user to run the cron job as. Default: root.\n\n\ncmd: The command to run. Required.\n\n\nminute: The minute field of the cron. Default: *.\n\n\nhour: The hour field of the cron. Default: *.\n\n\ndom: The day of month field for the cron. Default: *.\n\n\nmonth: The month field of the cron. Default: *.\n\n\ndow: The day of week field of the cron. Default: *.\n\n\n\n\nExample\n\n\ncron.entry --name foobar --cmd /path/to/some/report --minute \n*/5\n\n\n\n\n\nTODO\n\n\nAdd support for prefix info such as PATH, MAILTO.", 
            "title": "cron.entry"
        }, 
        {
            "location": "/resources/cron.entry/#name", 
            "text": "cron.entry", 
            "title": "Name"
        }, 
        {
            "location": "/resources/cron.entry/#description", 
            "text": "Manages cron entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/cron.entry/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: A single-word name for the cron. Required.  user: The user to run the cron job as. Default: root.  cmd: The command to run. Required.  minute: The minute field of the cron. Default: *.  hour: The hour field of the cron. Default: *.  dom: The day of month field for the cron. Default: *.  month: The month field of the cron. Default: *.  dow: The day of week field of the cron. Default: *.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/cron.entry/#example", 
            "text": "cron.entry --name foobar --cmd /path/to/some/report --minute  */5", 
            "title": "Example"
        }, 
        {
            "location": "/resources/cron.entry/#todo", 
            "text": "Add support for prefix info such as PATH, MAILTO.", 
            "title": "TODO"
        }, 
        {
            "location": "/resources/dpkg.debconf/", 
            "text": "Name\n\n\ndpkg.debconf\n\n\nDescription\n\n\nManages debconf entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\npackage: The package to configure. Required.\n\n\nquestion: The debconf question. Required.\n\n\nvtype: The vtype of the debconf setting. Required.\n\n\nvalue: The answer/setting. Required.\n\n\n\n\nExample\n\n\ndpkg.debconf --package mysql-server --question mysql-server/root_password\n               --vtype password --value mypassword", 
            "title": "dpkg.debconf"
        }, 
        {
            "location": "/resources/dpkg.debconf/#name", 
            "text": "dpkg.debconf", 
            "title": "Name"
        }, 
        {
            "location": "/resources/dpkg.debconf/#description", 
            "text": "Manages debconf entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/dpkg.debconf/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  package: The package to configure. Required.  question: The debconf question. Required.  vtype: The vtype of the debconf setting. Required.  value: The answer/setting. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/dpkg.debconf/#example", 
            "text": "dpkg.debconf --package mysql-server --question mysql-server/root_password\n               --vtype password --value mypassword", 
            "title": "Example"
        }, 
        {
            "location": "/resources/file.ini/", 
            "text": "Name\n\n\nfile.ini\n\n\nDescription\n\n\nManages ini files/entries\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nfile: The ini file. Required.\n\n\nsection: The ini file section. Use \"\nnone\n\" to not use a section. Required.\n\n\noption: The ini file setting/option. Required.\n\n\nvalue: The value of the option. Use \"\nnone\n\" to not set a value. Required.\n\n\n\n\nExample\n\n\nfile.ini --file /etc/nova/nova.conf --section DEFAULT --option debug --value True", 
            "title": "file.ini"
        }, 
        {
            "location": "/resources/file.ini/#name", 
            "text": "file.ini", 
            "title": "Name"
        }, 
        {
            "location": "/resources/file.ini/#description", 
            "text": "Manages ini files/entries", 
            "title": "Description"
        }, 
        {
            "location": "/resources/file.ini/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  file: The ini file. Required.  section: The ini file section. Use \" none \" to not use a section. Required.  option: The ini file setting/option. Required.  value: The value of the option. Use \" none \" to not set a value. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/file.ini/#example", 
            "text": "file.ini --file /etc/nova/nova.conf --section DEFAULT --option debug --value True", 
            "title": "Example"
        }, 
        {
            "location": "/resources/file.line/", 
            "text": "Name\n\n\nfile.line\n\n\nDescription\n\n\nManages single lines in a file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nfile: The file that the line belongs to. Required.\n\n\nline: The line to manage. Required.\n\n\nmatch: A regex to match to. Optional.\n\n\n\n\nExample\n\n\nfile.line --file /etc/memcached.conf \\\n                 --line \n-l 0.0.0.0\n --match \n^-l", 
            "title": "file.line"
        }, 
        {
            "location": "/resources/file.line/#name", 
            "text": "file.line", 
            "title": "Name"
        }, 
        {
            "location": "/resources/file.line/#description", 
            "text": "Manages single lines in a file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/file.line/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  file: The file that the line belongs to. Required.  line: The line to manage. Required.  match: A regex to match to. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/file.line/#example", 
            "text": "file.line --file /etc/memcached.conf \\\n                 --line  -l 0.0.0.0  --match  ^-l", 
            "title": "Example"
        }, 
        {
            "location": "/resources/git.repo/", 
            "text": "Name\n\n\ngit.repo\n\n\nDescription\n\n\nManage a git repository\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name (path) of the git repo destination. Required.\n\n\nsource: The URI of the source git repo. Required.\n\n\nbranch: The branch to checkout. Optional. Default: master.\n\n\ntag: The tag to checkout. Optional.\n\n\ncommit: the commit to checkout. Optional.\n\n\nowner: The owner of the repo. Default: root.\n\n\ngroup: The group owner of the repo. Default: root.\n\n\n\n\nExample\n\n\ngit.repo --state latest --name /root/.dotfiles --source https://github.com/jtopjian/dotfiles\n\n\n\n\nNotes\n\n\nIf state is set to \"latest\", Waffles will do a \ngit pull\n, if it's able to.\n\n\nThe order of checkout preferences is:\n\n\n\n\ncommit\n\n\ntag\n\n\nbranch", 
            "title": "git.repo"
        }, 
        {
            "location": "/resources/git.repo/#name", 
            "text": "git.repo", 
            "title": "Name"
        }, 
        {
            "location": "/resources/git.repo/#description", 
            "text": "Manage a git repository", 
            "title": "Description"
        }, 
        {
            "location": "/resources/git.repo/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name (path) of the git repo destination. Required.  source: The URI of the source git repo. Required.  branch: The branch to checkout. Optional. Default: master.  tag: The tag to checkout. Optional.  commit: the commit to checkout. Optional.  owner: The owner of the repo. Default: root.  group: The group owner of the repo. Default: root.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/git.repo/#example", 
            "text": "git.repo --state latest --name /root/.dotfiles --source https://github.com/jtopjian/dotfiles", 
            "title": "Example"
        }, 
        {
            "location": "/resources/git.repo/#notes", 
            "text": "If state is set to \"latest\", Waffles will do a  git pull , if it's able to.  The order of checkout preferences is:   commit  tag  branch", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/ip6tables.rule/", 
            "text": "Name\n\n\nip6tables.rule\n\n\nDescription\n\n\nManages ip6tables rules\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the rule. Required.\n\n\npriority: An arbitrary number to give the rule priority. Required. Default 100.\n\n\ntable: The table to add the rule to.. Required. Default: filter.\n\n\nchain: The chain to add the rule to. Required. Default: INPUT.\n\n\nrule: The rule. Required.\n\n\naction: The action to take on the rule. Required. Default: ACCEPT.\n\n\n\n\nExample\n\n\nip6tables.rule --priority 100 --name \nallow all from 192.168.1.0/24\n --rule \n-m tcp -s 192.168.1.0/24\n --action ACCEPT", 
            "title": "ip6tables.rule"
        }, 
        {
            "location": "/resources/ip6tables.rule/#name", 
            "text": "ip6tables.rule", 
            "title": "Name"
        }, 
        {
            "location": "/resources/ip6tables.rule/#description", 
            "text": "Manages ip6tables rules", 
            "title": "Description"
        }, 
        {
            "location": "/resources/ip6tables.rule/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the rule. Required.  priority: An arbitrary number to give the rule priority. Required. Default 100.  table: The table to add the rule to.. Required. Default: filter.  chain: The chain to add the rule to. Required. Default: INPUT.  rule: The rule. Required.  action: The action to take on the rule. Required. Default: ACCEPT.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/ip6tables.rule/#example", 
            "text": "ip6tables.rule --priority 100 --name  allow all from 192.168.1.0/24  --rule  -m tcp -s 192.168.1.0/24  --action ACCEPT", 
            "title": "Example"
        }, 
        {
            "location": "/resources/iptables.rule/", 
            "text": "Name\n\n\niptables.rule\n\n\nDescription\n\n\nManages iptables rules\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: An arbitrary name for the rule. Required.\n\n\npriority: An arbitrary number to give the rule priority. Required. Default 100.\n\n\ntable: The table to add the rule to.. Required. Default: filter.\n\n\nchain: The chain to add the rule to. Required. Default: INPUT.\n\n\nrule: The rule. Required.\n\n\naction: The action to take on the rule. Required. Default: ACCEPT.\n\n\n\n\nExample\n\n\niptables.rule --priority 100 --name \nallow all from 192.168.1.0/24\n --rule \n-m tcp -s 192.168.1.0/24\n --action ACCEPT", 
            "title": "iptables.rule"
        }, 
        {
            "location": "/resources/iptables.rule/#name", 
            "text": "iptables.rule", 
            "title": "Name"
        }, 
        {
            "location": "/resources/iptables.rule/#description", 
            "text": "Manages iptables rules", 
            "title": "Description"
        }, 
        {
            "location": "/resources/iptables.rule/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: An arbitrary name for the rule. Required.  priority: An arbitrary number to give the rule priority. Required. Default 100.  table: The table to add the rule to.. Required. Default: filter.  chain: The chain to add the rule to. Required. Default: INPUT.  rule: The rule. Required.  action: The action to take on the rule. Required. Default: ACCEPT.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/iptables.rule/#example", 
            "text": "iptables.rule --priority 100 --name  allow all from 192.168.1.0/24  --rule  -m tcp -s 192.168.1.0/24  --action ACCEPT", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.database/", 
            "text": "Name\n\n\nmysql.database\n\n\nDescription\n\n\nManages MySQL databases\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the database. Required.\n\n\ncharset: The character set of the database.\n\n\ncollate: The collation of the database.\n\n\n\n\nExample\n\n\nmysql.database --name mydb", 
            "title": "mysql.database"
        }, 
        {
            "location": "/resources/mysql.database/#name", 
            "text": "mysql.database", 
            "title": "Name"
        }, 
        {
            "location": "/resources/mysql.database/#description", 
            "text": "Manages MySQL databases", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.database/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the database. Required.  charset: The character set of the database.  collate: The collation of the database.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.database/#example", 
            "text": "mysql.database --name mydb", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.grant/", 
            "text": "Name\n\n\nmysql.grant\n\n\nDescription\n\n\nManages MySQL grants\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user to receive the grant. Required. unique.\n\n\nhost: The host of the user. Required. unique.\n\n\ndatabase: The database to apply the grant on. Required.\n\n\nprivileges: The privileges to grant. Required.\n\n\n\n\nExample\n\n\nmysql.grant --user nova --host localhost --database nova --privileges \nSELECT, UPDATE, DELETE", 
            "title": "mysql.grant"
        }, 
        {
            "location": "/resources/mysql.grant/#name", 
            "text": "mysql.grant", 
            "title": "Name"
        }, 
        {
            "location": "/resources/mysql.grant/#description", 
            "text": "Manages MySQL grants", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.grant/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user to receive the grant. Required. unique.  host: The host of the user. Required. unique.  database: The database to apply the grant on. Required.  privileges: The privileges to grant. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.grant/#example", 
            "text": "mysql.grant --user nova --host localhost --database nova --privileges  SELECT, UPDATE, DELETE", 
            "title": "Example"
        }, 
        {
            "location": "/resources/mysql.user/", 
            "text": "Name\n\n\nmysql.user\n\n\nDescription\n\n\nManages MySQL users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username of the mysql user. unique.\n\n\nhost: The host of the mysql user. Required. unique.\n\n\npassword: The password of the mysql user.\n\n\n\n\nUnintuitively, user and password are optional because MySQL allows blank usernames and blank passwords.\n\n\nExample\n\n\nmysql.user --user root --password password", 
            "title": "mysql.user"
        }, 
        {
            "location": "/resources/mysql.user/#name", 
            "text": "mysql.user", 
            "title": "Name"
        }, 
        {
            "location": "/resources/mysql.user/#description", 
            "text": "Manages MySQL users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/mysql.user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username of the mysql user. unique.  host: The host of the mysql user. Required. unique.  password: The password of the mysql user.   Unintuitively, user and password are optional because MySQL allows blank usernames and blank passwords.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/mysql.user/#example", 
            "text": "mysql.user --user root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.directory/", 
            "text": "Name\n\n\nos.directory\n\n\nDescription\n\n\nManages directories\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nowner: The owner of the directory. Default: root.\n\n\ngroup: The group of the directory. Default: root.\n\n\nmode: The perms/mode of the directory. Default: 0750.\n\n\nname: The destination directory. Required.\n\n\nsource: Optional source directory to copy.\n\n\nrecurse: Whether to apply all settings recursively. Optional.\n\n\nparent: Whether to make the parent directories. Optional.\n\n\n\n\nExample\n\n\nos.directory --source \n$profile_files/mydir\n --name /var/lib/mydir", 
            "title": "os.directory"
        }, 
        {
            "location": "/resources/os.directory/#name", 
            "text": "os.directory", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.directory/#description", 
            "text": "Manages directories", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.directory/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  owner: The owner of the directory. Default: root.  group: The group of the directory. Default: root.  mode: The perms/mode of the directory. Default: 0750.  name: The destination directory. Required.  source: Optional source directory to copy.  recurse: Whether to apply all settings recursively. Optional.  parent: Whether to make the parent directories. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.directory/#example", 
            "text": "os.directory --source  $profile_files/mydir  --name /var/lib/mydir", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.file/", 
            "text": "Name\n\n\nos.file\n\n\nDescription\n\n\nManages files\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nowner: The owner of the file Default: root.\n\n\ngroup: The group of the file Default: root.\n\n\nmode: The perms/mode of the file Default: 0640.\n\n\nname: The destination file. Required.\n\n\ncontent: STDIN content for the file. Optional.\n\n\nsource: Source file to copy. Optional.\n\n\n\n\nExample\n\n\nos.file --name /etc/foobar --content \nHello, World!", 
            "title": "os.file"
        }, 
        {
            "location": "/resources/os.file/#name", 
            "text": "os.file", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.file/#description", 
            "text": "Manages files", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.file/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  owner: The owner of the file Default: root.  group: The group of the file Default: root.  mode: The perms/mode of the file Default: 0640.  name: The destination file. Required.  content: STDIN content for the file. Optional.  source: Source file to copy. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.file/#example", 
            "text": "os.file --name /etc/foobar --content  Hello, World!", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.groupadd/", 
            "text": "Name\n\n\nos.groupadd\n\n\nDescription\n\n\nManages groups\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\ngroup: The group. Required.\n\n\ngid: The gid of the group. Optional.\n\n\n\n\nExample\n\n\nos.groupadd --group jdoe --gid 999", 
            "title": "os.groupadd"
        }, 
        {
            "location": "/resources/os.groupadd/#name", 
            "text": "os.groupadd", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.groupadd/#description", 
            "text": "Manages groups", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.groupadd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  group: The group. Required.  gid: The gid of the group. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.groupadd/#example", 
            "text": "os.groupadd --group jdoe --gid 999", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.symlink/", 
            "text": "Name\n\n\nos.symlink\n\n\nDescription\n\n\nManages symlinks\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the link. Required.\n\n\ntarget: The target of the link.\n\n\n\n\nExample\n\n\nos.symlink --name /usr/local/man --target /usr/share/man", 
            "title": "os.symlink"
        }, 
        {
            "location": "/resources/os.symlink/#name", 
            "text": "os.symlink", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.symlink/#description", 
            "text": "Manages symlinks", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.symlink/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the link. Required.  target: The target of the link.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.symlink/#example", 
            "text": "os.symlink --name /usr/local/man --target /usr/share/man", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.useradd/", 
            "text": "Name\n\n\nos.useradd\n\n\nDescription\n\n\nManages users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user Required.\n\n\nuid: The uid of the user Optional.\n\n\ngid: The gid of the user Optional.\n\n\ncreatehome: Whether to create the homedir. Default: false.\n\n\nsudo: Whether to give sudo ability: Default: false.\n\n\nshell: The shell of the user. Default /usr/sbin/nologin.\n\n\ncomment: The comment field. Optional.\n\n\nhomedir: The homedir of the user. Optional.\n\n\npasswd: The password hash. Optional.\n\n\ngroups: Supplemental groups of the user. Optional.\n\n\nsystem: Whether the user is a system user or not. Default: false\n\n\n\n\nExample\n\n\nos.useradd --user jdoe --uid 999 --createhome true --homedir /home/jdoe\n               --shell /bin/bash --comment \nJohn Doe\n\n\n\n\n\nNotes\n\n\nThe \n--system true\n flag is only useful during a create. If the user already\nexists and you choose to change it into a system using with the \n--system\n\nflag, it's best to delete the user and recreate it.", 
            "title": "os.useradd"
        }, 
        {
            "location": "/resources/os.useradd/#name", 
            "text": "os.useradd", 
            "title": "Name"
        }, 
        {
            "location": "/resources/os.useradd/#description", 
            "text": "Manages users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/os.useradd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user Required.  uid: The uid of the user Optional.  gid: The gid of the user Optional.  createhome: Whether to create the homedir. Default: false.  sudo: Whether to give sudo ability: Default: false.  shell: The shell of the user. Default /usr/sbin/nologin.  comment: The comment field. Optional.  homedir: The homedir of the user. Optional.  passwd: The password hash. Optional.  groups: Supplemental groups of the user. Optional.  system: Whether the user is a system user or not. Default: false", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/os.useradd/#example", 
            "text": "os.useradd --user jdoe --uid 999 --createhome true --homedir /home/jdoe\n               --shell /bin/bash --comment  John Doe", 
            "title": "Example"
        }, 
        {
            "location": "/resources/os.useradd/#notes", 
            "text": "The  --system true  flag is only useful during a create. If the user already\nexists and you choose to change it into a system using with the  --system \nflag, it's best to delete the user and recreate it.", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/python.pip/", 
            "text": "Name\n\n\npython.pip\n\n\nDescription\n\n\nManage a pip python package\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the pip package. Required.\n\n\nversion: The version of the pip package. Optional.\n\n\nvirtualenv: The virtual environment to put the package in. Required. Default: system.\n\n\nurl: A URL to install the package from. Optional.\n\n\nowner: The owner of the virtualenv. Required. Default: root.\n\n\ngroup: The group of the virtualenv. Required. Default: root.\n\n\nindex: Base URL of the python package index. Optional.\n\n\neditable: If the package is installed as an editable resource. Required. Default: false.\n\n\nenvironment: Additional environment variables. Optional.\n\n\ninstall_args: Additional arguments to use when installing. Optional.\n\n\nuninstall-args: Additional arguments to use when uninstalling. Optional.\n\n\n\n\nExample\n\n\npython.pip --name minilanguage\npython.pip --name minilanguage --version 0.3.0\npython.pip --name minilanguage --version latest\n\n\n\n\nNotes\n\n\nThis resource is heavily based on puppet-python", 
            "title": "python.pip"
        }, 
        {
            "location": "/resources/python.pip/#name", 
            "text": "python.pip", 
            "title": "Name"
        }, 
        {
            "location": "/resources/python.pip/#description", 
            "text": "Manage a pip python package", 
            "title": "Description"
        }, 
        {
            "location": "/resources/python.pip/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the pip package. Required.  version: The version of the pip package. Optional.  virtualenv: The virtual environment to put the package in. Required. Default: system.  url: A URL to install the package from. Optional.  owner: The owner of the virtualenv. Required. Default: root.  group: The group of the virtualenv. Required. Default: root.  index: Base URL of the python package index. Optional.  editable: If the package is installed as an editable resource. Required. Default: false.  environment: Additional environment variables. Optional.  install_args: Additional arguments to use when installing. Optional.  uninstall-args: Additional arguments to use when uninstalling. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/python.pip/#example", 
            "text": "python.pip --name minilanguage\npython.pip --name minilanguage --version 0.3.0\npython.pip --name minilanguage --version latest", 
            "title": "Example"
        }, 
        {
            "location": "/resources/python.pip/#notes", 
            "text": "This resource is heavily based on puppet-python", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/python.virtualenv/", 
            "text": "Name\n\n\npython.virtualenv\n\n\nDescription\n\n\nManage a python virtualenv\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the virtualenv package. Required.\n\n\nvenv_dir: The path / parent directory to the virtual environment. Required. Default: /usr/local\"\n\n\nrequirements: The path to a requirements.txt file. Optional.\n\n\nsystempkgs: Copy system site-packages into the virtualenv. Required. Default: false.\n\n\ndistribute: Distribute method. Required. Default: distribute\n\n\nindex: An alternative pypi index file. Optional.\n\n\nowner: The owner of the virtualenv. Required. Default: root.\n\n\ngroup: The group of the virtualenv. Required. Default: root.\n\n\nmode: The directory mode of the venv. Required. Default: 755.\n\n\nenvironment: Additional environment variables. Optional.\n\n\npip_args: Extra pip args. Optional.\n\n\n\n\nExample\n\n\npython.virtualenv --name foo\n\n\n\n\nNotes\n\n\nThis resource is heavily based on puppet-python", 
            "title": "python.virtualenv"
        }, 
        {
            "location": "/resources/python.virtualenv/#name", 
            "text": "python.virtualenv", 
            "title": "Name"
        }, 
        {
            "location": "/resources/python.virtualenv/#description", 
            "text": "Manage a python virtualenv", 
            "title": "Description"
        }, 
        {
            "location": "/resources/python.virtualenv/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the virtualenv package. Required.  venv_dir: The path / parent directory to the virtual environment. Required. Default: /usr/local\"  requirements: The path to a requirements.txt file. Optional.  systempkgs: Copy system site-packages into the virtualenv. Required. Default: false.  distribute: Distribute method. Required. Default: distribute  index: An alternative pypi index file. Optional.  owner: The owner of the virtualenv. Required. Default: root.  group: The group of the virtualenv. Required. Default: root.  mode: The directory mode of the venv. Required. Default: 755.  environment: Additional environment variables. Optional.  pip_args: Extra pip args. Optional.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/python.virtualenv/#example", 
            "text": "python.virtualenv --name foo", 
            "title": "Example"
        }, 
        {
            "location": "/resources/python.virtualenv/#notes", 
            "text": "This resource is heavily based on puppet-python", 
            "title": "Notes"
        }, 
        {
            "location": "/resources/rabbitmq.policy/", 
            "text": "Name\n\n\nrabbitmq.policy\n\n\nDescription\n\n\nManages RabbitMQ policies\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nname: The name of the policy. Required.\n\n\nvhost: The vhost to apply the policy to. Default: /.\n\n\nqueues: The queues to apply the policy to. Default: all.\n\n\npolicy: The policy. Required.\n\n\n\n\nExample\n\n\nrabbitmq.policy --name openstack-ha --vhost openstack --policy '{\nha-mode\n:\nall\n}'", 
            "title": "rabbitmq.policy"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#name", 
            "text": "rabbitmq.policy", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#description", 
            "text": "Manages RabbitMQ policies", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  name: The name of the policy. Required.  vhost: The vhost to apply the policy to. Default: /.  queues: The queues to apply the policy to. Default: all.  policy: The policy. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.policy/#example", 
            "text": "rabbitmq.policy --name openstack-ha --vhost openstack --policy '{ ha-mode : all }'", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/", 
            "text": "Name\n\n\nrabbitmq.user_permissions\n\n\nDescription\n\n\nManages RabbitMQ user permissions\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username@vhost of the rabbitmq user. Required.\n\n\nconf: The conf portion of the set_permissions command. Default: '.*'\n\n\nwrite: The write portion of the set_permissions command. Default: '.*'\n\n\nread: The read portion of the set_permissions command. Default: '.*'\n\n\n\n\nExample\n\n\nrabbitmq.user_permission --user_permission root --password password", 
            "title": "rabbitmq.user_permissions"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#name", 
            "text": "rabbitmq.user_permissions", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#description", 
            "text": "Manages RabbitMQ user permissions", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username@vhost of the rabbitmq user. Required.  conf: The conf portion of the set_permissions command. Default: '.*'  write: The write portion of the set_permissions command. Default: '.*'  read: The read portion of the set_permissions command. Default: '.*'", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.user_permissions/#example", 
            "text": "rabbitmq.user_permission --user_permission root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.user/", 
            "text": "Name\n\n\nrabbitmq.user\n\n\nDescription\n\n\nManages RabbitMQ users\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The username of the rabbitmq user. Required.\n\n\npassword: The password of the rabbitmq user.\n\n\nadmin: Make the user an admin. Default: false.\n\n\n\n\nExample\n\n\nrabbitmq.user --user root --password password", 
            "title": "rabbitmq.user"
        }, 
        {
            "location": "/resources/rabbitmq.user/#name", 
            "text": "rabbitmq.user", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.user/#description", 
            "text": "Manages RabbitMQ users", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.user/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The username of the rabbitmq user. Required.  password: The password of the rabbitmq user.  admin: Make the user an admin. Default: false.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.user/#example", 
            "text": "rabbitmq.user --user root --password password", 
            "title": "Example"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/", 
            "text": "Name\n\n\nrabbitmq.vhost\n\n\nDescription\n\n\nManages RabbitMQ vhosts\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nvhost: The vhostname of the rabbitmq vhost. Required.\n\n\n\n\nExample\n\n\nrabbitmq.vhost --vhost openstack", 
            "title": "rabbitmq.vhost"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#name", 
            "text": "rabbitmq.vhost", 
            "title": "Name"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#description", 
            "text": "Manages RabbitMQ vhosts", 
            "title": "Description"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  vhost: The vhostname of the rabbitmq vhost. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/rabbitmq.vhost/#example", 
            "text": "rabbitmq.vhost --vhost openstack", 
            "title": "Example"
        }, 
        {
            "location": "/resources/service.sysv/", 
            "text": "Name\n\n\nservice.sysv\n\n\nDescription\n\n\nManages sysv-init services\n\n\nParameters\n\n\n\n\nstate: The state of the service. Required. Default: running.\n\n\nname: The name of the service. Required.\n\n\n\n\nExample\n\n\nservice.sysv --name memcached", 
            "title": "service.sysv"
        }, 
        {
            "location": "/resources/service.sysv/#name", 
            "text": "service.sysv", 
            "title": "Name"
        }, 
        {
            "location": "/resources/service.sysv/#description", 
            "text": "Manages sysv-init services", 
            "title": "Description"
        }, 
        {
            "location": "/resources/service.sysv/#parameters", 
            "text": "state: The state of the service. Required. Default: running.  name: The name of the service. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/service.sysv/#example", 
            "text": "service.sysv --name memcached", 
            "title": "Example"
        }, 
        {
            "location": "/resources/service.upstart/", 
            "text": "Name\n\n\nservice.upstart\n\n\nDescription\n\n\nManages upstart services\n\n\nParameters\n\n\n\n\nstate: The state of the service. Required. Default: running.\n\n\nname: The name of the service. Required.\n\n\n\n\nExample\n\n\nservice.upstart --name memcached", 
            "title": "service.upstart"
        }, 
        {
            "location": "/resources/service.upstart/#name", 
            "text": "service.upstart", 
            "title": "Name"
        }, 
        {
            "location": "/resources/service.upstart/#description", 
            "text": "Manages upstart services", 
            "title": "Description"
        }, 
        {
            "location": "/resources/service.upstart/#parameters", 
            "text": "state: The state of the service. Required. Default: running.  name: The name of the service. Required.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/service.upstart/#example", 
            "text": "service.upstart --name memcached", 
            "title": "Example"
        }, 
        {
            "location": "/resources/sudoers.cmd/", 
            "text": "Name\n\n\nsudoers.cmd\n\n\nDescription\n\n\nProvides an easy way to give a user sudo access to a single command\ndefined in a sudoers.d file.\n\n\nParameters\n\n\n\n\nstate: The state of the resource. Required. Default: present.\n\n\nuser: The user of the sudo privilege. Required.\n\n\ncommand: The command of the sudo privilege. Required.\n\n\npassword: Whether to prompt for a password. Required. Default: false.\n\n\n\n\nExample\n\n\nsudoers.cmd --user consul --command /usr/local/bin/consul_build_hosts_file.sh", 
            "title": "sudoers.cmd"
        }, 
        {
            "location": "/resources/sudoers.cmd/#name", 
            "text": "sudoers.cmd", 
            "title": "Name"
        }, 
        {
            "location": "/resources/sudoers.cmd/#description", 
            "text": "Provides an easy way to give a user sudo access to a single command\ndefined in a sudoers.d file.", 
            "title": "Description"
        }, 
        {
            "location": "/resources/sudoers.cmd/#parameters", 
            "text": "state: The state of the resource. Required. Default: present.  user: The user of the sudo privilege. Required.  command: The command of the sudo privilege. Required.  password: Whether to prompt for a password. Required. Default: false.", 
            "title": "Parameters"
        }, 
        {
            "location": "/resources/sudoers.cmd/#example", 
            "text": "sudoers.cmd --user consul --command /usr/local/bin/consul_build_hosts_file.sh", 
            "title": "Example"
        }
    ]
}